package com.factorylabs.orange.unit.core.net{	import asunit.asserts.assertEquals;	import asunit.asserts.assertNotNull;	import asunit.asserts.assertTrue;	import asunit4.async.addAsync;	import com.factorylabs.orange.core.net.LoadItem;	import org.osflash.signals.Signal;	import flash.net.URLRequest;	/**	 * Generate the test cases for the LoadItem class. 	 * 	 * <hr />	 * <p><a target="_top" href="http://github.com/factorylabs/orange-actionscript/MIT-LICENSE.txt">MIT LICENSE</a></p>	 * <p>Copyright (c) 2004-2010 <a target="_top" href="http://www.factorylabs.com/">Factory Design Labs</a></p>	 * 	 * <p>Permission is hereby granted to use, modify, and distribute this file 	 * in accordance with the terms of the license agreement accompanying it.</p> 	 *	 * @author		grantdavis	 * @version		1.0.0 :: Feb 17, 2010	 */	public class LoadItemTests 	{		private var _url 				:String = 'http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif';		private var _loader				:LoadItem;		private var _stateSignal		:Signal;		private var _completeSignal		:Signal;		private var _openSignal			:Signal;		private var _initSignal			:Signal;		private var _progressSignal		:Signal;		private var _errorSignal		:Signal;				[Before]		public function runBeforeEachTest() :void		{			_loader = new LoadItem( new URLRequest( _url ));			_stateSignal = _loader.stateSignal;			_completeSignal = _loader.completeSignal;			_openSignal = _loader.openSignal;			_initSignal = _loader.initSignal;			_progressSignal = _loader.progressSignal;			_errorSignal = _loader.errorSignal;		}				[After]		public function runAfterEachTest() :void		{			_loader.dispose();			_loader = null;		}				[Test]		public function constructor() :void		{			assertTrue( '_property is LoadItem', _loader is LoadItem );		}				[Test]		public function should_have_created_references_to_signals() :void		{			assertEquals( _stateSignal, _loader.stateSignal );			assertEquals( _completeSignal, _loader.completeSignal );			assertEquals( _openSignal, _loader.openSignal );			assertEquals( _initSignal, _loader.initSignal );			assertEquals( _progressSignal, _loader.progressSignal );			assertEquals( _errorSignal, _loader.errorSignal );		}				[Test]		public function should_have_request_with_url() :void		{			assertEquals( _loader.request.url, _url );		}				[Test(async)]		public function should_load_file_with_success() :void		{			_completeSignal.add( addAsync( handleFileSuccess, 5000 ));			_loader.start();		}		private function handleFileSuccess() :void		{			assertNotNull( _loader.displayContent );		}				[Test(async)]		public function should_fail_with_bad_url() :void		{			_errorSignal.add( addAsync( handleFileError, 500 ));			_loader.request.url = "http://bad/file.jpg";			_loader.start();		}		private function handleFileError( $error : String ) :void		{			assertNotNull( $error );		}	}}