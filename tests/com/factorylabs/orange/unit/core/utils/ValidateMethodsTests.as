package com.factorylabs.orange.unit.core.utils{	import asunit.asserts.assertFalse;	import asunit.asserts.assertTrue;	import com.factorylabs.orange.core.utils.ValidateMethods;	/**	 * Generate the test cases for the ValidateMethods class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2010 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Nov 26, 2009	 */	public class ValidateMethodsTests 	{		[Test]		public function isValidEmail() :void		{			assertTrue( ValidateMethods.isValidEmail( 'mk.kitt@factorylabs.com' ) );			assertTrue( ValidateMethods.isValidEmail( 'matthew.kitt@factorylabs.com' ) );			assertTrue( ValidateMethods.isValidEmail( 'matthewkitt@factorylabs.com' ) );			assertFalse( ValidateMethods.isValidEmail( '@factorylabs.com' ) );			assertFalse( ValidateMethods.isValidEmail( 'm@.com' ) );		}				[Test]		public function isValidUSZip() :void		{			assertTrue( ValidateMethods.isValidUSZip( '12345' ) );			assertTrue( ValidateMethods.isValidUSZip( '12345-1234' ) );			assertFalse( ValidateMethods.isValidUSZip( '1234' ) );			assertFalse( ValidateMethods.isValidUSZip( '12345-12345' ) );		}				[Test]		public function isValidCanPostal() :void		{			assertTrue( ValidateMethods.isValidCanPostal( 'A1B2C3' ) );			assertTrue( ValidateMethods.isValidCanPostal( 'A1B 2C3' ) );			assertFalse( ValidateMethods.isValidCanPostal( '12345' ) );			assertFalse( ValidateMethods.isValidCanPostal( '12345-1234' ) );		}				[Test(description='Needs to support area codes and formatting like 303.666.6666 and (303). Should be able to remove all numeric numbers and test if 10 characters', tracker_id='')]		public function isValidPhoneNumber() :void		{//			assertThat( ValidateMethods.isValidPhoneNumber( '666.6666' ), equalTo( true ) );			assertTrue( ValidateMethods.isValidPhoneNumber( '666-6666' ) );			assertTrue( ValidateMethods.isValidPhoneNumber( '6666666' ) );			assertTrue( ValidateMethods.isValidPhoneNumber( '666 6666' ) );		}				[Test(description='Need to refactor to strip all non numeric characters then make sure we have 3 left', tracker_id='')]		public function isValidAreaCode() :void		{			assertTrue( ValidateMethods.isValidAreaCode( '123' ) );			assertFalse( ValidateMethods.isValidAreaCode( '' ) );		}	}}