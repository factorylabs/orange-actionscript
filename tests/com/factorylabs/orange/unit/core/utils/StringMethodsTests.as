package com.factorylabs.orange.unit.core.utils{	import asunit.asserts.assertFalse;
	import asunit.asserts.assertTrue;
	import asunit.asserts.assertEquals;	import com.factorylabs.orange.core.utils.StringMethods;	/**	 * Generate the test cases for the StringMethods class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2010 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Mar 16, 2009	 */	public class StringMethodsTests 	{		private var _wanker :String;		private var _urlstr	:String;				[Before]		public function runBeforeEachTest() :void		{			_wanker = 'gabe is a _wanker'; 			_urlstr = 'http://factorylabs.com/'; 		}				[After]		public function runAfterEachTest() :void		{			_wanker = '';			_urlstr = '';		}				[Test]		public function afterFirst() :void		{			assertEquals( StringMethods.afterFirst( _wanker, '_' ), 'wanker' );			assertEquals( StringMethods.afterFirst( _wanker, ' ' ), 'is a _wanker' );		}				[Test]		public function afterLast() :void		{			assertEquals( StringMethods.afterLast( _urlstr, '.' ), 'com/' );			assertEquals( StringMethods.afterLast( _wanker, ' ' ), '_wanker' );		}				[Test]		public function beginsWith() :void		{			assertTrue( StringMethods.beginsWith( 'XAAA', 'X' ) );			assertTrue( StringMethods.beginsWith( 'XXAAA', 'XX' ) );			assertTrue( StringMethods.beginsWith( 'XXXAAA', 'XX' ) );			assertFalse( StringMethods.beginsWith( 'XX', '0' ) );		}				[Test]		public function beforeFirst() :void		{			assertEquals( StringMethods.beforeFirst( _wanker, ' ' ), 'gabe' );			assertEquals( StringMethods.beforeFirst( _wanker, '_' ), 'gabe is a ' );			assertEquals( StringMethods.beforeFirst( _urlstr, '' ), '' );		}				[Test]		public function beforeLast() :void		{			assertEquals( StringMethods.beforeLast( _wanker, '_' ), 'gabe is a ' );			assertEquals( StringMethods.beforeLast( _urlstr, '.' ), 'http://factorylabs' );		}				[Test]		public function between() :void		{			assertEquals( StringMethods.between( _urlstr, '//', '.' ), 'factorylabs' );			assertEquals( StringMethods.between( _urlstr, 'h', 'p' ), 'tt' );		}				[Test]		public function block() :void		{			assertEquals( StringMethods.block( 'Mansfield smells', 10, ' ' ).length, 3 );		}				[Test]		public function capitalize() :void		{			assertEquals( StringMethods.capitalize( _wanker ), 'Gabe is a _wanker' );		}				[Test]		public function contains() :void		{			assertTrue( StringMethods.contains( _wanker, 'g' ) );			assertTrue( StringMethods.contains( _wanker, 'gabe' ) );			assertFalse( StringMethods.contains( _wanker, '3' ) );		}				[Test]		public function countOf() :void		{			assertTrue( StringMethods.countOf( _urlstr, '/' ) == 3 );			assertTrue( StringMethods.countOf( _urlstr, 'M' ) == 0 );			assertTrue( StringMethods.countOf( _urlstr, 'm' ) == 1 );		}				[Test]		public function editDistance() :void		{			var str1 :String = '123';			var str2 :String = '132';			assertEquals( StringMethods.editDistance( str1, str2 ), 2 );		}				[Test]		public function endsWith() :void		{			assertTrue( StringMethods.endsWith( _urlstr, '/' ) );			assertTrue( StringMethods.endsWith( _urlstr, 'com/' ) );		}				[Test]		public function hasText() :void		{			assertTrue( StringMethods.hasText( _urlstr ) );			assertFalse( StringMethods.hasText( '  ' ) );		}				[Test]		public function isEmpty() :void		{			assertFalse( StringMethods.isEmpty( _urlstr ) );			assertTrue( StringMethods.isEmpty( '' ) );		}				[Test]		public function isNumeric() :void		{			assertTrue( StringMethods.isNumeric( '123' ) );			assertFalse( StringMethods.isNumeric( _urlstr ) );			assertFalse( StringMethods.isNumeric( '  ' ) );		}				[Ignore('This is not working as expected.')]		[Test]		public function padLeft() :void		{			assertEquals( StringMethods.padLeft( 'abc', '-', 2 ), '--abc' );		}				[Ignore('This is not working as expected.')]		[Test]		public function padRight() :void		{			assertEquals( StringMethods.padLeft( 'abc', '-', 2 ), 'abc--' );		}				[Test]		public function properCase() :void		{			assertEquals( StringMethods.properCase( _wanker), 'Gabe is a _wanker' );		}				[Test]		public function quote() :void		{			assertEquals( StringMethods.quote( 'dog\'s' ), '"dog\'s"' );		}				[Test]		public function remove() :void		{			assertEquals( StringMethods.remove( 'suck_er', '_', false ), 'sucker' );			assertEquals( StringMethods.remove( 'suCk_ecr', 'C', true ), 'suk_ecr' );		}				[Test]		public function removeExtraWhitespace() :void		{			assertEquals( StringMethods.removeExtraWhitespace( '\t\rsucker\n  ' ), 'sucker' );		}				[Test]		public function reverse() :void		{			assertEquals( StringMethods.reverse( 'bargains' ), 'sniagrab' );			assertEquals( StringMethods.reverse( 'get bargains' ), 'sniagrab teg' );		}				[Test]		public function reverseWords() :void		{			assertEquals( StringMethods.reverseWords( 'shred the gnar' ), 'gnar the shred' );		}				[Test]		public function similarity() :void		{			assertEquals( StringMethods.similarity( '1234', '1235' ), 75 );		}				[Test]		public function stripTags() :void		{			assertEquals( StringMethods.stripTags( '<b>bold</b>' ), 'bold' );			assertEquals( StringMethods.stripTags( '<a href="http://www.factorylabs.com/">link</a>' ), 'link' );		}				[Test]		public function swapCase() :void		{			assertEquals( StringMethods.swapCase( 'Fugly' ), 'fugly' );		}				[Test]		public function trim() :void		{			assertEquals( StringMethods.trim( '\t\n\rmansfield\t\n\r' ), 'mansfield' );			assertEquals( StringMethods.trim( '   mansfield   ' ), 'mansfield' );		}				[Test]		public function trimLeft() :void		{			assertEquals( StringMethods.trimLeft( '\t\n\rmansfield' ), 'mansfield' );			assertEquals( StringMethods.trimLeft( '   mansfield' ), 'mansfield' );			assertEquals( StringMethods.trimLeft( '   mansfield  ' ), 'mansfield  ' );		}				[Test]		public function trimRight() :void		{			assertEquals( StringMethods.trimRight( 'mansfield\t\n\r' ), 'mansfield' );			assertEquals( StringMethods.trimRight( 'mansfield   ' ), 'mansfield' );			assertEquals( StringMethods.trimRight( '   mansfield  ' ), '   mansfield' );		}				[Test]		public function wordCount() :void		{			assertEquals( StringMethods.wordCount( _wanker ), 4 );		}				[Ignore('This is not truncating properly.')]		[Test]		public function truncate() :void		{			assertEquals( StringMethods.truncate( 'mansfield', 3, '...' ), 'man...' );		}				[Test]		public function formatNumber() :void		{			assertEquals( StringMethods.formatNumber( 10256.434 ), '10,256' );		}	}}