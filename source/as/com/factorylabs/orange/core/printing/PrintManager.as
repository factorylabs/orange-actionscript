package com.factorylabs.orange.core.printing{	import com.factorylabs.orange.core.logger.Log;		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.printing.PrintJob;	import flash.printing.PrintJobOptions;	import flash.printing.PrintJobOrientation;		/**	 * Manages printing to a users printer.  	 *  	 * Has static function to create pages and determines orientation before sending to printer. 	 *  	 * Copyright 2008 by Factory Design Labs, All Rights Reserved. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Ryan Boyajian 	 * @version		1.0.0 :: Apr 18, 2008 	 */	public class PrintManager	{/* Properties ......................................................................................*/				/**		 * The PrintJob instance.		 */		private static var _printJob:PrintJob;				/**		 * The PrintJobOptions.		 */		private static var _printJobOptions:PrintJobOptions;		/* Constructor ......................................................................................*//* Public Methods .....................................................................................*/		/**		 * Prints a Sprite to a page(s).		 * 		 * @param sprite			The sprite to be printed.		 * @param scale				Boolean for scaling the sprite down to page width.		 * @param printAsBitmap		Boolean for printing as a bitmap. *Vector printing will sometimes produce a smaller spool file, and a better image 		 * 							than bitmap printing. However, if your content includes a bitmap image, and you want to preserve any alpha transparency 		 * 							or color effects, you should print the page as a bitmap image.		 * 							***Currently setting this to true will not print.  Need to do some more investigating on this.		 * @param pageCutoffBuffer	The number of pixels to overlap at the bottom of multi page prints so that nothing is completely cut off or in half.		 */		public static function print( sprite:Sprite, printAsBitmap:Boolean=false, scale:Boolean=false, pageCutoffBuffer:int=15 ):void		{			_printJob = new PrintJob();						// create options if printAsBitmap.			createOptions( printAsBitmap );						// scale to size if set to true			if( scale ) scaleToFit( sprite );						var printPages:int = 0;			if ( _printJob.start() )			{				// add code here to change appearance of the sprite based on paper orientation.				// such as rotating the page 90 degrees if landscape so that it always prints out like it was portrait.				if ( _printJob.orientation == PrintJobOrientation.LANDSCAPE )                {                	Log.info( "[PrintManager] print()", "Orientation = " + PrintJobOrientation.LANDSCAPE );                }                else                {                	Log.info( "[PrintManager] print()", "Orientation = " + PrintJobOrientation.PORTRAIT );				}                // multiple pages				if( sprite.height > _printJob.pageHeight )				{					// grab numPages					var numPages:Number;					numPages = Math.ceil( sprite.height / _printJob.pageHeight );					// calculate with offset and reset numPages					var updatedHeight:Number = sprite.height + ( pageCutoffBuffer * numPages );					numPages = Math.ceil( updatedHeight / _printJob.pageHeight );										var yPos:int = 0;					for( var i:int = 0; i < numPages; i++ )					{						// add pages						printPages += addPage( sprite, new Rectangle( 0, yPos, _printJob.pageWidth, _printJob.pageHeight ) );						// increment Rectangle's yPos to move to next page. 						yPos += _printJob.pageHeight - pageCutoffBuffer;					}				}				// single page				else printPages += addPage( sprite );				// send to the spool				if( printPages > 0 )				{					Log.info( "[PrintManager] print()", "printPages = " + printPages );					_printJob.send();				}			}			else Log.info( "[PrintManager] print()", "Print job canceled." );		}		/* Private Methods ......................................................................................*/				/**		 * Creates the print job options, which only sets the printAsBitmap property.		 * 		 * @param printAsBitmap		Boolean value for printing as a bitmap.		 */		private static function createOptions( printAsBitmap:Boolean ):void		{			_printJobOptions = new PrintJobOptions();			_printJobOptions.printAsBitmap = printAsBitmap;		}		/**		 * Scales the sprite down to page width while maintaining aspect ratio.		 * 		 * @param sprite	The Sprite to be scaled.		 */		private static function scaleToFit( sprite:Sprite ):void		{			while( sprite.width > _printJob.pageWidth )			{				sprite.scaleX -= 1;				sprite.scaleY -= 1;			}		}				/**		 * Adds a page to the PrintJob.		 * 		 * @param sprite	The Sprite that is to be added to a page.		 * @param rect		The Rectangle area of the sprite to be added. Used for multiple page printing.		 */		private static function addPage( sprite:Sprite, rect:Rectangle = null ):int		{			var added:int = 0;			try		    {		        _printJob.addPage( sprite, rect, _printJobOptions );		        added = 1;		    }		    catch( err:Error )		    {		        Log.error( "[PrintManager] addPage()", err );// Handle error.		    }		    return added;		}		/* Event Handlers......................................................................................*//* Getters/Setters ......................................................................................*/	}}