package com.factorylabs.orange.core.gc{	import com.factorylabs.orange.core.collections.Map;	/**	 * Used for site wide clean up. This class is used primarily for cleaning up a .swf that gets loaded and disposed of so that all references can be cleaned out. 	 *  	 * Manages all of the Janitor instances so that clean up can be called on everything in the app. 	 *  	 * <p>Copyright 2004-2009 by Factory Design Labs</p>     *      * Permission is hereby granted, free of charge, to any person obtaining     * a copy of this software and associated documentation files (the     * "Software"), to deal in the Software without restriction, including     * without limitation the rights to use, copy, modify, merge, publish,     * distribute, sublicense, and/or sell copies of the Software, and to     * permit persons to whom the Software is furnished to do so, subject to     * the following conditions:     *      * The above copyright notice and this permission notice shall be     * included in all copies or substantial portions of the Software.     *      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE     * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION     * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION     * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Ryan Boyajian 	 * @version		1.0.0 :: Feb 8, 2008 	 */	public class JanitorManager 	{/* * PROPERTIES**************************************************************************************************** */				/**		 *	Single instance of this class.		 */		private static var _instance	:JanitorManager;				/**		 * Map to store all Janitor instances.		 */		private var _janitorMap			:Map;		/* * PROPERTY ACCESS**************************************************************************************************** */		/**		 * @private		 */		public function get janitorMap() :Map { return _janitorMap; }		/* * CONSTRUCTOR**************************************************************************************************** */			/**		 * @param enforcer	Internal class not available to other classes. Forces this class to be constructed via getInstance().		 */		public function JanitorManager( enforcer:SingletonEnforcer )		{			enforcer = null;		}				/**		 * @return	The single instance of JanitorManager		 */		public static function get instance() :JanitorManager { return getInstance(); }		public static function getInstance():JanitorManager		{			if ( _instance == null ) _instance = new JanitorManager( new SingletonEnforcer() );			return _instance;		}				public function toString() : String 		{			return "com.factorylabs.orange.core.gc.JanitorManager";		}/* * PUBLIC ACCESS**************************************************************************************************** */		/**		 * Adds a Janitor instance to the _janitorMap.		 * @param	jan		Janitor to add.		 */				public function addJanitor( jan:IJanitor ):void		{			if( _janitorMap == null ) _janitorMap = new Map( true );			_janitorMap.add( jan, true );		}				/**		 * Removes a Janitor instance from the _janitorMap.		 * @param	jan		Janitor to remove.		 */		public function removeJanitor( jan:IJanitor ):void		{			if( _janitorMap.hasKey( jan ) ) _janitorMap.remove( jan );		}				/**		 * Cleans up all Janitors in the application.		 */		public function cleanUp():void		{			for each( var janitor:Object in _janitorMap.keys )			{				IJanitor( janitor ).cleanUp();			}			if( _janitorMap != null ) _janitorMap.dispose();		}/* * INTERNAL ACCESS**************************************************************************************************** *//* * EVENT HANDLING**************************************************************************************************** */	}}/** * Internal type to enforce using getInstance() to create an instance of SiteJanitor.  */internal class SingletonEnforcer {}