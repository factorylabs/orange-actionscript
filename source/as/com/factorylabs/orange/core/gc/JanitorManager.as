package com.factorylabs.orange.core.gc{
	import com.factorylabs.orange.core.collections.Map;				
	/** 	 * Used for site wide clean up. This class is used primarily for cleaning up a .swf that gets loaded and disposed of so that all references can be cleaned out. 	 *  	 * Manages all of the Janitor instances so that clean up can be called on everything in the app. 	 *  	 * Copyright 2008 by Factory Design Labs, All Rights Reserved. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 * 	 * @author		Ryan Boyajian 	 * @version		1.0.0 :: Feb 8, 2008 	 */
	public class JanitorManager 	{/* Properties ......................................................................................*/			/**		 *	Single instance of this class.		 */		private static var _instance	:JanitorManager;				/**		 * Map to store all Janitor instances.		 */		private var _janitorMap			:Map;				/**		 * @private		 */		public function get janitorMap() :Map { return _janitorMap; }		/* Constructor ......................................................................................*/			/**		 * @param enforcer	Internal class not available to other classes. Forces this class to be constructed via getInstance().		 */		public function JanitorManager( enforcer:SingletonEnforcer )		{			enforcer = null;		}		/* Singleton Accessor .....................................................................................*/		/**		 * @return	The single instance of JanitorManager		 */		public static function get instance() :JanitorManager { return getInstance(); }		public static function getInstance():JanitorManager		{			if ( _instance == null ) _instance = new JanitorManager( new SingletonEnforcer() );			return _instance;		}		/* Public Methods .....................................................................................*/				/**		 * Adds a Janitor instance to the _janitorMap.		 * @param	jan		Janitor to add.		 */				public function addJanitor( jan:IJanitor ):void		{			if( _janitorMap == null ) _janitorMap = new Map( true );			_janitorMap.add( jan, true );		}				/**		 * Removes a Janitor instance from the _janitorMap.		 * @param	jan		Janitor to remove.		 */		public function removeJanitor( jan:IJanitor ):void		{			if( _janitorMap.hasKey( jan ) ) _janitorMap.remove( jan );		}				/**		 * Cleans up all Janitors in the application.		 */		public function cleanUp():void		{			for each( var janitor:Object in _janitorMap.keys )			{				IJanitor( janitor ).cleanUp();			}			if( _janitorMap != null ) _janitorMap.dispose();		}
	}
}
/** * Internal type to enforce using getInstance() to create an instance of SiteJanitor.  */internal class SingletonEnforcer {}