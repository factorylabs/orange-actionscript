package com.factorylabs.orange.core.gc{	import flash.utils.Dictionary;	import flash.utils.Timer;		/**	 * The janitor is used for garbage collection dealing with Timer objects. 	 *  	 * <p>Janitor has methods within it to add and remove various objects that need to be removed from memory. There is also a one off clean method to collect everything.</p> 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 6, 2009 	 */	public class JanitorTimer		implements IJanitor 	{/* * PROPERTIES**************************************************************************************************** */		/**		 * The object that instantiated this Janitor instance.		 */		private var _target				:Object;				/**		 * Dictionary for storing timers.		 */		private var _timers:Dictionary;/* * CONSTRUCTOR**************************************************************************************************** */			/**		 * Create an instance of a Janitor and add it to the JanitorManager for cleanup.		 * @param target	who needs cleaning.		 */		public function JanitorTimer( target :Object )		{			_target = target;			JanitorManager.instance.addJanitor( this );		}				/**		 * @return	string equivalent of this class.		 */		public function toString() :String 		{			return "com.factorylabs.orange.core.gc.JanitorTimer";		}/* * PUBLIC ACCESS**************************************************************************************************** */		/**		 * Clean the timers and itself out of the manager.		 */		public function cleanUp() :void		{			cleanUpTimers();			JanitorManager.instance.removeJanitor( this );		}				/**		 * Adds a Timer to it's Dictionary.		 * @param timer	the timer object to add.		 */		public function addTimer( timer :Timer ) :void 		{			if( !_timers ) _timers = new Dictionary( true );			_timers[ timer ] = true;		}				/**		 * Removes a Timer from it's Dictionary.		 * @param timer	the timer object to remove.		 */		public function removeTimer( timer :Timer ) :void 		{			if( !_timers ) return;			delete( _timers[ timer ] );		}				/**		 * Cleans up all timers in it's Dictionary by calling stop() on them.		 */		public function cleanUpTimers() :void 		{			for( var timer :Object in _timers )			{				( timer as Timer ).stop();			}		}	}}