package com.factorylabs.orange.core.gc{	import flash.utils.Dictionary;	import flash.utils.clearInterval;			/**	 * The janitor is used for garbage collection dealing with Interval objects. 	 *  	 * <p>Janitor has methods within it to add and remove various objects that need to be removed from memory. There is also a one off clean method to collect everything.</p> 	 *  	 *  <p>The following people are credited with originating all or parts of this code:	 *	Grant Skinner :: www.gskinner.com 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 6, 2009 	 */	public class JanitorInterval		implements IJanitor 	{/* * PROPERTIES**************************************************************************************************** */		/**		 * The object that instantiated this Janitor instance.		 */		private var _target				:Object;				/**		 * Dictionary for storing intervals.		 */		private var _intervalIDs		:Dictionary;				/**		 * @private		 */		public function get intervalIDs() :Dictionary { return _intervalIDs; }/* * CONSTRUCTOR**************************************************************************************************** */			/**		 * Create an instance of a Janitor and add it to the JanitorManager for cleanup.		 * @param target	who needs cleaning.		 */		public function JanitorInterval( target :Object )		{			_target = target;			JanitorManager.instance.addJanitor( this );		}				/**		 * @return	string equivalent of this class.		 */		public function toString() :String 		{			return "com.factorylabs.orange.core.gc.JanitorInterval";		}/* * PUBLIC ACCESS**************************************************************************************************** */		/**		 * Clean the intervals and itself out of the manager.		 */		public function cleanUp() :void		{			cleanUpIntervalIDs();			JanitorManager.instance.removeJanitor( this );		}				/**		 * Adds an interval id to it's Dictionary.		 * @param intervalID	the interval to add.		 */		public function addIntervalID( intervalID :uint ) :void 		{			if( !_intervalIDs ) _intervalIDs = new Dictionary( true );			_intervalIDs[ intervalID ] = true;		}				/**		 * Removes an interval id from it's Dictionary		 * * @param intervalID	the interval to remove.		 */		public function removeIntervalID( intervalID :uint ) :void 		{			if( !_intervalIDs ) return;			delete( _intervalIDs[ intervalID ] );		}				/**		 * Cleans up all interval ids from it's Dictionary by calling clearInterval() on them.		 */		public function cleanUpIntervalIDs() :void 		{			for( var intervalID :Object in _intervalIDs )			{				clearInterval( uint( intervalID ) );				removeIntervalID( uint( intervalID ) );			}		}	}}