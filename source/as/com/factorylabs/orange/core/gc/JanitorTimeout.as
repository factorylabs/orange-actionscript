package com.factorylabs.orange.core.gc{	import flash.utils.Dictionary;	import flash.utils.clearTimeout;		/**	 * The janitor is used for garbage collection dealing with Timeout objects. 	 *  	 * <p>Janitor has methods within it to add and remove various objects that need to be removed from memory. There is also a one off clean method to collect everything.</p> 	 *  	 * <p>Copyright 2004-2009 by Factory Design Labs</p>     *      * Permission is hereby granted, free of charge, to any person obtaining     * a copy of this software and associated documentation files (the     * "Software"), to deal in the Software without restriction, including     * without limitation the rights to use, copy, modify, merge, publish,     * distribute, sublicense, and/or sell copies of the Software, and to     * permit persons to whom the Software is furnished to do so, subject to     * the following conditions:     *      * The above copyright notice and this permission notice shall be     * included in all copies or substantial portions of the Software.     *      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE     * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION     * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION     * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 6, 2009 	 */	public class JanitorTimeout		implements IJanitor	{/* * PROPERTIES**************************************************************************************************** */		/**		 * The object that instantiated this Janitor instance.		 */		private var _target				:Object;					/**		 * Dictionary for storing timeouts.		 */		private var _timeoutIDs:Dictionary;/* * CONSTRUCTOR**************************************************************************************************** */			/**		 * Create an instance of a Janitor and add it to the JanitorManager for cleanup.		 * @param target	who needs cleaning.		 */		public function JanitorTimeout( target :Object )		{			_target = target;			JanitorManager.instance.addJanitor( this );		}				/**		 * @return	string equivalent of this class.		 */		public function toString() :String 		{			return "com.factorylabs.orange.core.gc.JanitorTimeout";		}/* * PUBLIC ACCESS**************************************************************************************************** */				/**		 * Clean the timeout and itself out of the manager.		 */		public function cleanUp() :void		{			cleanUpTimeoutIDs();			JanitorManager.instance.removeJanitor( this );		}				/**		 * Add a timeout id to it's dictionary.		 * @param timeoutID	the timeout id to add.		 */		public function addTimeoutID( timeoutID :uint ) :void 		{			if( !_timeoutIDs ) _timeoutIDs = new Dictionary( true );			_timeoutIDs[ timeoutID ] = true;		}				/**		 * Remove a timeout id from it's dictionary.		 * @param timeoutID	the timeout id to remove.		 */		public function removeTimeoutID( timeoutID :uint ) :void 		{			if( !_timeoutIDs ) return;			delete( _timeoutIDs[ timeoutID ] );		}				/**		 * Clean up all timeout ids from it's Dictionary by calling clearTimeout() on them.		 */		public function cleanUpTimeoutIDs() :void 		{			for( var timeoutID :Object in _timeoutIDs )			{				clearTimeout( Number( timeoutID ) );			}		}	}}