package com.factorylabs.orange.core.logging{	import flash.events.Event;		/**	 * Event object which carries Log information.	 *	 * <hr />	 * <p>Copyright 2004-2009 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p>	 *	 * Permission is hereby granted, free of charge, to any person obtaining	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Feb 16, 2009	 */	public class LoggerEvent		extends Event	{		public static const UPDATE	:String = 'LogEvent.UPDATE';		private var _message		:String;		private var _object			:Object;		private var _level			:String;		private var _name			:String;		/**		 * @return	String message to trace out.		 */		public function get message() :String		{			return _message;		}				/**		 * @return Object to be inspected via a debugger.		 */		public function get object() :Object		{			return _object;		}				/**		 * @return LogLevels constant or custom notification filter.		 */		public function get level() :String		{			return _level;		}				/**		 * @return The name of the logger dispatching events.		 */		public function get name() :String 		{ 			return _name; 		}			/**		 * Carries information for a log message.		 * @param $type			The type of the event, accessible as Event.type.		 * @param $msg			String message to print out.		 * @param $object		Object to be inspected via a debugger.		 * @param $level		LogLevels constant or custom notification filter.		 * @param $name			The name of the logger dispatching events.		 * @param $bubbles		Determines whether the Event object participates in the bubbling stage of the event flow. The default value is false.		 * @param $cancelable	Determines whether the Event object can be canceled. The default values is false.		 * 		 * @example The following code creates a LogEvent 	 	 * <listing version="3.0" >	 	 * new LoggerEvent( LogEvent.UPDATE, $msg, $object, $level, _name );	 	 * </listing>		 */			public function LoggerEvent( $type :String, $msg :String, $object :Object, $level :String, $name :String = '', $bubbles :Boolean = false, $cancelable :Boolean = false )		{			super( $type, $bubbles, $cancelable );			_message = $msg;			_object = $object;			_level = $level;			_name = $name;		}				/**		 * @return The string equivalent of this class		 */		override public function toString() :String 		{			return 'com.factorylabs.orange.core.logging.LoggerEvent';		}		/**		 * Duplicates an instance of a LogEvent.		 * <p>Returns a new LogEvent that is a copy of the original instance of the LogEvent object.</p>		 * @return	A new LogEvent object that is identical to the original.		 */		override public function clone() :Event		{			return new LoggerEvent( this.type, this.message, this.object, this.level, this.name, this.bubbles, this.cancelable );		}	}}