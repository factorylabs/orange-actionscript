package com.factorylabs.orange.core.text{
	import com.factorylabs.orange.core.collections.Map;		import flash.text.StyleSheet;		/**	 * It's like a closet, only with StyleSheets in it.	 *  	 * <p>Singleton class which manages the storage and retrieval a single or mulitple number of <code>StyleSheets</code> through a <code>Map</code>.</p> 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 * 	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 12, 2009 	 */	public final class FStyleManager 	{		private static var _instance	:FStyleManager;		private var _map				:Map;		private var _primarykey			:String; 		private var _primarycss			:StyleSheet;				/**		 * @return	The primary key name of the StyleSheet.		 */		public function get primarykey() :String { return _primarykey; }		public function set primarykey( v_primarykey :String ) :void		{			_primarykey = v_primarykey;		}				/**		 * @return	This is the primary StyleSheet also used for automating an FTextField's @see core.display.FTextField()#span() method of setting the StyleSheet.		 */		public function get primarycss() :StyleSheet { return _primarycss; }		public function set primarycss( v_primarycss :StyleSheet ) :void		{			_primarycss = v_primarycss;		}				/**		 * @param key	The identifier for the main key referencing the StyleSheet stored in the map.		 * @param css	The StyleSheet to be used as the primary object.		 */		public function setPrimarys( key :String, css :StyleSheet ) :void		{			primarykey = key;			primarycss = css;		}				/**		 * @return	The StyleSheet by way of a key. 		 */		public function getStyleSheet( key :String ) :StyleSheet		{			return StyleSheet( _map.get( key ) );		}				/**		 * @return	The key by way of the StyleSheet. 		 */		public function getKey( css :StyleSheet ) :String		{			var key :String;			for each( var tmpkey :String in _map.keys )			{				var ss :StyleSheet = getStyleSheet( tmpkey );				if( ss == css ) key = tmpkey;			}			return key; 		}		/**		 * @return	All of the current keys mapped.		 */		public function getKeys() :Array		{			return _map.keys;		}				/**		 * @param enforcer	Internal type only available to this class. 		 */		public function FStyleManager( enforcer :SingletonEnforcer )		{			enforcer = null;		}		/**		 * @return	The single instance of Log		 */		public static function get instance() :FStyleManager { return getInstance(); }		public static function getInstance() :FStyleManager		{			if( _instance == null ) _instance = new FStyleManager( new SingletonEnforcer() );			return _instance;		}					/**		 * @return	the string equivalent of this class.		 */		public static function toString() :String 		{			return "com.factorylabs.orange.core.text.FStyleManager";		}				/**		 * @param key			The identifier for the StyleSheet object.		 * @param css			The StyleSheet object to add to the map.		 * @param makePrimary	Whether the map item being created is the primary StyleSheet. 		 */		public function addStyleSheet( key :String, css :StyleSheet, makePrimary :Boolean = false ) :void		{			if( _map == null )				_map = new Map( true );							if( makePrimary )				setPrimarys( key, css );						_map.add( key, css, true );		}				/**		 * @param key			The identifier for the StyleSheet object.		 * @param str			Converts a String into a StyleSheet via @see #parseStringToCSS() and adds it to the map through @see #addStyleSheet()		 * @param makePrimary	Whether the map item being created is the primary StyleSheet.		 * @return	The StyleSheet created from the String. 		 */		public function addStyleSheetFromString( key :String, str :String, makePrimary :Boolean = false ) :StyleSheet		{			var css :StyleSheet = parseStringToCSS( str );			addStyleSheet( key, css, makePrimary );			return css;		}				/**		 * @param key	The identifier to the StyleSheet object to remove from the map. 		 */		public function removeStyleSheet( key :String ) :void		{			if( _map && _map.hasKey( key ) )				_map.remove( key );		}				/**		 * Make them all go away... far, far away.		 */		public function removeAllStyleSheets() :void		{			for each( var css :StyleSheet in _map.values )			{				StyleSheet( css ).clear( );			}			if( _map != null )				_map.dispose();		}				/**		 * This is a utility method for converting a String into a StyleSheet object.		 * @param str	Well formed String representation of a StyleSheet.		 * @return	The StyleSheet created from the well formed String.		 * @throws 	FStyleManagerError if the css string appears to be malformed ( styleNames.length <= 0 ).		 */		public function parseStringToCSS( str :String ) :StyleSheet		{			var css :StyleSheet = new StyleSheet();			css.parseCSS( str );			if( css.styleNames.length <= 0 )				throw new FStyleManagerError( '[FStyleManager].parseStringToCSS() : The .css file/string appears to be malformed.' );			return css;		}					}	}internal class SingletonEnforcer {}class FStyleManagerError	extends Error{	public function FStyleManagerError( msg :String )	{		super( msg );	}	}