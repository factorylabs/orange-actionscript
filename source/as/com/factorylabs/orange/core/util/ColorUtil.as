/*** Special functions for common color conversion needs.* @author Justin Gitlin* @version 0.1*/package com.factorylabs.orange.core.util{		public final class ColorUtil	{		/**		 *	Convert a string hex number to the native flash numbers that hex automatically get set to.		 *	@param	hexString		the, uh, hex string.		 *	@return			the flash Number representation of the hex color.		 *	TODO: should we strip a pound symbol if its there?		 */		public static function hexToFlashColorNumber( hexString:String ):Number 		{			return Number( hexString );		}			/**		 *	Convert a native flash number to a string string hex number.		 *	@param	flashColorNumber		the, native flash color Number.		 *	@return			the flash Number representation of the hex color.		 */		public static function flashColorNumberToHexString( flashColorNumber:Number ):String 		{			return '0x'+flashColorNumber.toString(16);		}				/**		 * Converts rgb color values to hex.		 *		 * @param	r		red		 * @param	g		green		 * @param	b		blue		 * @return	hex color number		 * @use		{@code var vHex:Number = ColorUtil.rgbToHex( 255, 70, 55 );}		 */		public static function rgbToHex( r:Number, g:Number, b:Number ):Number		{	        return ( r << 16 | g << 8 | b );		}				public static function argbToHex( a :Number, r :Number, g :Number, b :Number ) :Number		{		    return ( a << 24 | r << 16 | g << 8 | b );		}				/**		 * Converts a hex color number to an object with r, g, b properties.		 *		 * @param	hex		the hex color number.		 * @return 	an object with r, g, and b color numbers.		 * @use		{@code var vRgb:Number = ColorUtil.hexToRGB( 0xffffff );}		 */		public static function hexToRGB( hex:Number ):Object		{			// bitwise shift the hex numbers.	        var red:Number = hex >> 16;	        var grnBlu:Number = hex - ( red << 16 );	        var grn:Number = grnBlu >> 8;	        var blu:Number = grnBlu - ( grn << 8 );	        	        // return the new object	        return( { r:red, g:grn, b:blu } );		}				public static function hexToARGB( hex :Number ) :Object		{			var a :Number = ( hex >> 24 ) & 0xFF;			var r :Number = ( hex >> 16 ) & 0xFF;			var g :Number = ( hex >> 8 ) & 0xFF;			var b :Number = ( hex ) & 0xFF;		    return { a: a, r: r, b: b, g: g };		}			}}