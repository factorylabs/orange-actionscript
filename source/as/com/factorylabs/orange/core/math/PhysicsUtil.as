/*** Special functions for common physics needs.* @author Justin Gitlin* @version 0.1*/package com.factorylabs.orange.core.math{		public final class PhysicsUtil	{		/**		 *	Get the angle from coordinate 1 to coordinate 2.		 *	@param	x1		the x coordinate of point 1.		 *	@param	y1		the y coordinate of point 1.		 *	@param	x2		the x coordinate of point 2.		 *	@param	y2		the y coordinate of point 2.		 *	@return			the angle from one point to another.		 * 	@use			{@code var vAngle:Number = PhysicsUtil.getAngleToTarget( 10, 20, 50, 70 );}		 */		public static function getAngleToTarget( x1:Number, y1:Number, x2:Number, y2:Number ):Number 		{			return -Math.atan2( x1 - x2, y1 - y2 ) * 180 / Math.PI;		}			/**		 *	Keep an angle between 0-360.		 *	@param	vAngle		the angle we want to be sure is between 0 and 360.		 *	@return				the constrained angle.		 * 	@use				{@code var vAngle:Number = PhysicsUtil.constrainAngle( -800 );}		 */		public static function constrainAngle( vAngle:Number ):Number		{			if( vAngle < 0 )			{				vAngle += 360;			}			else if( vAngle > 360 )			{				vAngle -= 360;			}			return vAngle;		}				/**		 *	Calculates the length of the unknown side of a right triangle, by supplying the 4 points that make up the 2 sides. This is the Pythagorean Theorem.		 *	@param	x1			the x1 point coordinate.		 *	@param	x2			the x2 point coordinate.		 *	@param	y1			the y1 point coordinate.		 *	@param	y2			the y2 point coordinate.		 *	@return				the length of the unknown side.		 * 	@use				{@code var vHypotenuse:Number = MathUtil.getHypotenuse( 10, 20, 50, 70 );}		 */		public static function getHypotenuse( x1:Number, x2:Number, y1:Number, y2:Number ):Number		{			return Math.sqrt( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) );		}	}	}