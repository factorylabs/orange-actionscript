package com.factorylabs.orange.core.net{	import com.factorylabs.orange.core.collections.FlashVars;	import com.factorylabs.orange.core.gc.IDisposable;		import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.geom.Point;	import flash.system.Capabilities;	import flash.system.fscommand;	import flash.text.TextField;		/**	 * Static class which provides access to the javascript SWFEngine. SWFEngine simplifies much of the work  	 * for resizing the browser, setting bookmarks, resizing the SWF movie, opening popup windows, and manpulating CSS. 	 *  	 * <p>SWFEngine is broken into two main implementations; one for Actionscript and one for javascript.  	 * The actionscript SWFEngine API allows access to the javascript SWFEngine instance which can manipulate  	 * the DOM of the HTML page. The javascript API performs basic routines such as embedding the SWF using SWFObject, 	 * resize it using SWFFit, and includes required scripts such as SWFAddress to the HTML page. 	 * </p> 	 *  	 * <p></p> 	 *  	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 * 	 * @author		grantdavis 	 * @version		1.0.0 :: Dec 16, 2008 	 */	public class SWFEngine 		implements IDisposable	{/* Properties ......................................................................................*/		/**		 * The priority level of javascript calls made by SWFEngine. Defaults to high priority with <code>int.MAX_VALUE</code>. 		 */		private static const JS_PRIORITY:int = int.MAX_VALUE;				/**		 * Single instance of this class.		 */		private static var _instance:SWFEngine;		/**		 * String identifier assigned by the SWFEngine javascript instance when embedding the SWF movie. 		 */		private static var _swfID:String;				 /**		  * Flag which indicates if javascript access is available.		  */		private static const _available:Boolean = ExternalInterface.available;		/**		 * Reference to the stage object.		 */		private var _stage:Stage;				/**		 * Min/max values for the width/height of the embedded SWF movie.		 */		private static var _minWidth:int;		private static var _minHeight:int;		private static var _maxWidth:int;		private static var _maxHeight:int;				/* Getters/Setters .....................................................................................*/				/**		 * @return	The string value of the ID of this SWFEngine instance.		 */		public static function get swfID():String { return _swfID; }		/**		 * @return	The minimum width of the SWF movie within the browser window.		 */		public static function get minWidth():int { return _minWidth; }		/**		 * @return	The minimum height of the SWF movie within the browser window.		 */		public static function get minHeight():int { return _minHeight; }		/**		 * @return	The maximum width of the SWF movie within the browser window.		 */		public static function get maxWidth():int { return _maxWidth; }		/**		 * @return	The maximum height of the SWF movie within the browser window.		 */		public static function get maxHeight():int { return _maxHeight; }				/* Constructor .....................................................................................*/				/**		 * @param enforcer	Internal type only available to this class. 		 */		public function SWFEngine( enforcer:SingletonEnforcer )		{			enforcer = null;		}		/* Public Methods .....................................................................................*/				/**		 * Singleton accessor method.		 * 		 * <p>Use this method to return the single instance of this object. Below is an example		 * of using the getInstance() method:</p>		 * 		 * <listing>		 * var instance:SWFEngine = SWFEngine.getInstance();		 * </listing>		 * 		 * @return 	The single instance of SWFEngine		 */		public static function get instance() :SWFEngine{ return getInstance(); }		public static function getInstance():SWFEngine		{			if ( _instance == null ) _instance = new SWFEngine( new SingletonEnforcer() );			return _instance;		}		/**		 * Prepares the SWFEngine for use.		 * <p>Entry point for the class. This method must be called before calling other methods.</p>		 * @param stage		Reference to the stage of this Flash movie.		 */		public function initialize( stage:Stage ):void		{			_stage = stage;						// start listening for mouse wheels.			_stage.addEventListener( MouseEvent.MOUSE_WHEEL, onWheel );						// store the passed ID for this SWFEngine instance via flash vars			_swfID = FlashVars.instance.get( 'swfEngineId' ); 		}		/**		 * @inheritDoc		 */		public function dispose():void		{			_stage.removeEventListener( MouseEvent.MOUSE_WHEEL, onWheel );		}		/**		 * Dynamically writes CSS to the HTML page containing this Flash application.		 * @param selector		String value that represents a CSS selector		 * @param declaration	String value that represents a CSS declaration		 */		public static function createCSS( selector:String, declaration:String ):void		{			if ( !_available ) return;			JavascriptInterface.call( "swfobject.createCSS", JS_PRIORITY, null, selector, declaration );		}				/**		 * Sets a bookmark to the current page. 		 * @param title		Title of the bookmark.		 * @param url		URL address of the page to bookmark.		 */		public static function setBookmark( title:String, url:String ):void		{			if ( !_available ) return;			JavascriptInterface.call( getEngineInstance() + ".setBookmark", JS_PRIORITY, null, title, url );		}				/**		 * Resizes the SWF movie.		 * @param minWidth		Minimum width of the embedded flash object on the HTML page. 		 * @param minHeight		Minimum height of the embedded flash object on the HTML page.		 * @param maxWidth		[Optional] Maximum width the embedded flash object can stretch to. If none is specifed, inherits values used for minimum width.		 * @param maxHeight		[Optional] Maximum height the embedded flash object can stretch to. If none is specifed, inherits values used for minimum height.		 * @param centerH		[Optional] Flag which indicates if the embedded flash object is horizontally centered on the HTML page. Defaults to false.		 * @param centerV		[Optional] Flag which indicates if the embedded flash object is vertically centered on the HTML page. Defaults to false.		 */		public static function resizeSWF( minWidth:int, minHeight:int, maxWidth:int=-1, maxHeight:int=-1, centerH:Boolean=false, centerV:Boolean=false ):void		{			if ( !_available ) return;			// record values			_minWidth = minWidth;			_minHeight = minHeight;						// declare max w/h as null unless we have specified values.			_maxWidth = ( maxWidth > 0 ) ? maxWidth : null;			_maxHeight = ( maxHeight > 0 ) ? maxHeight : null;			JavascriptInterface.call( getEngineInstance() + ".resizeSWF", JS_PRIORITY, null, minWidth, minHeight, _maxWidth, _maxHeight, centerH, centerV );		}				/**		 * Resizes the browser's inner content window.		 * @param wv Width value of the viewable area.		 * @param hv Height value of the viewable area.		 */		public static function resizeBrowserViewableArea( wv:int, hv:int ) : void		{			if ( !_available ) return;			JavascriptInterface.call( "SWFEngine.resizeViewableArea", JS_PRIORITY, null, wv, hv );		}						/**		 * Opens a popup window using javascript's window.open method.		 * 		 * <p>By default this method will try to use fscommand to open the window and avoid popup blockers when		 * viewing this SWF within Microsoft's Internet Explorer 6. Without using fscommand, the popup is blocked		 * without any indication to the user.</p>		 * 		 * @param window	Instance of a PopupWindow object describing the window.open() parameters and features.		 * @param useFSCommand	Flag which indicates if fscommand should be used to open the popup window when using MS IE 6.0.		 */		public static function openWindow( window:PopupWindow, useFSCommand:Boolean=true ):void		{			if ( !_available ) return;			// verify the required url and window name properties are present.			if ( window.url == null || window.windowName == null )			{				throw new Error( "[SWFEngine] Error: You must specify the PopupWindow.url and PopupWindow.windowName properties before opening a popup window.");			}						if ( Capabilities.playerType == "ActiveX" && useFSCommand )			{				var windowName:String;								// remove any spaces that were placed in the window name. 				if( window.windowName.indexOf( " " ) > -1 ) 				{					windowName = window.windowName.split( " " ).join( "" );				} 				else windowName = window.windowName;								var fsFunctionCall:String = "window.open('" + window.url + "','" + windowName + "','" + window.generateFeatures() + "')";				fscommand( fsFunctionCall );			}			else			{				JavascriptInterface.call( "window.open", JS_PRIORITY, null, window.url, window.windowName, window.generateFeatures() );			}		}			/**		 * Closes the browser window by invoking the javascript method window.close().		 */		public static function closeWindow():void		{			if ( !_available ) return;			JavascriptInterface.call( "window.close" );		}				/**		 * Resizes the browser window to a specific width and height.		 * <p>The width and height values specified include the browser chrome and should be included when		 * measuring the window size. To resize the browser to show a specific viewable area, see <code>SWFEngine.resizeBrowserViewableArea()</code></p>		 * @param w		New width value of the browser. 		 * @param h		New height value of the browser.		 */		public static function resizeWindowTo( w:int, h:int ):void		{			if ( !_available ) return;			JavascriptInterface.call( "window.resizeTo", JS_PRIORITY, null, w, h );		}				/**		 * Adjusts the width and height values of the browser window by the values specified.		 * @param dw	The change in width to apply to the browser window.		 * @param dh	The change in height to apply to the browser window.		 */		public static function resizeWindowBy( dw:int, dh:int ):void		{			if ( !_available ) return;			JavascriptInterface.call( "window.resizeBy", JS_PRIORITY, null, dw, dh );		}				/**		 * Moves the browser window to a new x,y location.		 * @param x 	Position of the left side of the browser.		 * @param y 	Position of the top of the browser.		 */		public static function moveWindow( x:int, y:int ):void		{			if ( !_available ) return;			JavascriptInterface.call( "window.move", JS_PRIORITY, null, x, y );		}				/**		 * Adjusts the position of the browser window by the values specified.		 * @param dx 	Amount to move the left side of the browser by.		 * @param dy 	Amount to move the top side of the browser by.		 */		public static function moveWindowBy( dx:int, dy:int ):void		{			if ( !_available ) return;			JavascriptInterface.call( "window.moveBy", JS_PRIORITY, null, dx, dy );		}/* Protected Methods .....................................................................................*//* Private Methods ......................................................................................*/		/**		 * 		 */		private static function getEngineInstance():String		{			return "SWFEngine.getInstance('" + _swfID + "')";		}/* Event Handlers......................................................................................*/		/**		 * @param	evt		Event object from dispatching class. 		 */		private function onWheel( evt:MouseEvent ):void		{			var objs:Array = _stage.getObjectsUnderPoint( new Point( evt.stageX, evt.stageY ));						var topObj:DisplayObject = objs[ objs.length-1 ];						// don't proceed if we don't get an object reference.			if ( topObj == null ) return;						if ( !topObj.hasEventListener( MouseEvent.MOUSE_WHEEL ) && !( topObj is TextField ))			{				// perform scroll on an object that doesn't trigger mouse wheel or is a scrolling text field.				ExternalInterface.call( "window.scrollBy", 0, -evt.delta*15 );			}		}	}}/** * Internal type to enforce using getInstance() to create an instance of SWFEngine.  */internal class SingletonEnforcer {}