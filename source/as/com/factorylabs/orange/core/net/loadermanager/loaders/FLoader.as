package com.factorylabs.orange.core.net.loadermanager.loaders{	import com.factorylabs.orange.core.logger.Log;		import flash.display.Loader;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.system.SecurityDomain;		/** 	 * FLoader handles loading of display objects and uses default 	 * icons to show image load errors.  	 *  	 * Error events are given high priority so that we can intercept these	 * events and prevent any other listeners taking action on the unfound file. 	 * Instead, we want to load the broken image icon and then proceed as normal. 	 *  	 * Copyright 2007 by Factory Design Labs, All Rights Reserved. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Grant 	 * @version		1.0.0 :: Nov 2, 2007 	 * @version		2.0.0 :: August 14, 2008 	 */	public class FLoader 		extends Loader			implements ILoader	{/* * PROPERTIES**************************************************************************************************** */				/**		 * 		 */		private static const DEFAULT_CONTEXT : LoaderContext = new LoaderContext( true, ApplicationDomain.currentDomain, SecurityDomain.currentDomain );		/**		 * Constant reference to the broken image icon. 		 */		protected const BROKEN_IMAGE_ICON:String = "media/images/missing.png";/* * PROPERTY ACCESS**************************************************************************************************** */		/**		 * @inheritDoc		 */		public function get dispatcher():IEventDispatcher		{			return this.contentLoaderInfo;		}		/**		 * @inheritDoc		 */		public function get bytesLoaded():int		{			return this.contentLoaderInfo.bytesLoaded;		}		/**		 * @inheritDoc		 */		public function get bytesTotal():int		{			return this.contentLoaderInfo.bytesTotal;		}		/**		 * @inheritDoc		 */		public function get data():*		{			return super.content;		}		/* * CONSTRUCTOR**************************************************************************************************** */			public function FLoader()		{			super();			setListeners();		}/* * PUBLIC ACCESS**************************************************************************************************** */		/**		 * @inheritDoc		 */		public function open( request:URLRequest, context:*=null ):void		{			if ( context == null ) context = DEFAULT_CONTEXT;			super.load( request, context as LoaderContext );		}				/**		 * @inheritDoc		 */		public override function close() : void		{			try{ super.close(); }			catch( e:* ) {} 		}		/* * INTERNAL ACCESS**************************************************************************************************** */		/**		 * Methods which sets the loader to listen for error events.		 * Error events are added with high priority. 		 */		private function setListeners():void		{			this.contentLoaderInfo.addEventListener( Event.UNLOAD, onComplete );			this.contentLoaderInfo.addEventListener( Event.COMPLETE, onComplete );			this.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onError, false, 999 );			this.contentLoaderInfo.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onError, false, 999 );		}				/**   		 * Removes listeners from content info.		 */		private function removeListeners():void		{			this.contentLoaderInfo.removeEventListener( Event.UNLOAD, onComplete );			this.contentLoaderInfo.removeEventListener( Event.COMPLETE, onComplete );			this.contentLoaderInfo.removeEventListener( IOErrorEvent.IO_ERROR, onError );			this.contentLoaderInfo.removeEventListener( SecurityErrorEvent.SECURITY_ERROR, onError );		}/* * EVENT HANDLING**************************************************************************************************** */		/**		 * Removes event listeners after a successful load or a load		 * that was aborted before finished. 		 * 		 * @param	evt		Event object from dispatching class. 		 */		protected function onComplete( evt:Event ):void		{			removeListeners();		}				/**		 * This handler intercepts the ErrorEvent and prevents it from propigating		 * to other listeners. From here we load the default broken image icon.		 * 		 * We want to intercept the error in the event that this ImageLoader is being		 * used in a queue, it won't hear the error and will continue with normal load		 * process after the broken image icon is loaded.  		 * 		 * @param	evt		Event object from dispatching class. 		 */		protected function onError( evt:ErrorEvent ):void		{			Log.error( "[ImageLoader] onError() ", "Error loading request image. Displaying default broken icon." );						// remove error handling on first error. subsequent errors will need to be handled			// by the listening classes as normal. i.e. if we fail to load the broken image icon,			// we're just damn outta luck and need a runtime error to be thrown. 			this.contentLoaderInfo.removeEventListener( IOErrorEvent.IO_ERROR, onError );			this.contentLoaderInfo.removeEventListener( SecurityErrorEvent.SECURITY_ERROR, onError );						// halt event.			evt.stopImmediatePropagation();						// load broken image icon. 			load( new URLRequest( BROKEN_IMAGE_ICON ));		}	}}