package com.factorylabs.orange.core.net{	/** 	 * Object which defines the properties for opening a new window using javascript. 	 *  	 * Copyright 2008 by Factory Design Labs, All Rights Reserved. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Grant 	 * @version		1.0.0 :: May 20, 2008 	 */	public class PopupWindow 	{/* Properties ......................................................................................*/		/**		 * The String equivilent of a Boolean value of true used to format the javascript arguments for window.open() method.		 */		private static const YES:String = "yes";				/**		 * The String equivilent of a Boolean value of false used to format the javascript arguments for window.open() method.		 */		private static const NO:String = "no";		/**		 * Holds all the properties of the window features. We store these in this generic object		 * instead of private variables so we can easily loop through this object and generate		 * a string of all the window features for the popup.		 */		private var _props:Object;/* Getters/Setters ......................................................................................*/		/**		 * @return 		 */		public function get url():String { return _props[ "url" ]; }		/**		 * @private		 */		public function set url( value:String ):void { _props[ "url" ] = value; }						/**		 * @return 		 */		public function get windowName():String { return _props[ "windowName" ]; }		/**		 * @private		 */		public function set windowName( value:String ):void { _props[ "windowName" ] = value; }				/**		 * @return 		 */		public function get width():uint { return _props[ "width" ]; }		/**		 * @private		 */		public function set width( value:uint ):void { _props[ "width" ] = value; }						/**		 * @return 		 */		public function get height():uint { return _props[ "height" ]; }		/**		 * @private		 */		public function set height( value:uint ):void { _props[ "height" ] = value; }						/**		 * @return 		 */		public function get innerWidth():uint { return _props[ "innerWidth" ]; }		/**		 * @private		 */		public function set innerWidth( value:uint ):void { _props[ "innerWidth" ] = value; }						/**		 * @return 		 */		public function get innerHeight():uint { return _props[ "innerHeight" ]; }		/**		 * @private		 */		public function set innerHeight( value:uint ):void { _props[ "innerHeight" ] = value; }						/**		 * @return 		 */		public function get outerHeight():uint { return _props[ "outerHeight" ]; }		/**		 * @private		 */		public function set outerHeight( value:uint ):void { _props[ "outerHeight" ] = value; }						/**		 * @return 		 */		public function get screenX():uint { return _props[ "screenX" ]; }		/**		 * @private		 */		public function set screenX( value:uint ):void { _props[ "screenX" ] = value; }						/**		 * @return 		 */		public function get screenY():uint { return _props[ "screenY" ]; }		/**		 * @private		 */		public function set screenY( value:uint ):void { _props[ "screenY" ] = value; }						/**		 * @return 		 */		public function get resizable():Boolean { return _props[ "resizable" ]; }		/**		 * @private		 */		public function set resizable( value:Boolean ):void { _props[ "resizable" ] = value; }						/**		 * @return 		 */		public function get location():Boolean { return _props[ "location" ]; }		/**		 * @private		 */		public function set location( value:Boolean ):void { _props[ "location" ] = value; }		/**		 * @return 		 */		public function get status():Boolean { return _props[ "status" ]; }		/**		 * @private		 */		public function set status( value:Boolean ):void { _props[ "status" ] = value; }						/**		 * @return 		 */		public function get menubar():Boolean { return _props[ "menubar" ]; }		/**		 * @private		 */		public function set menubar( value:Boolean ):void { _props[ "menubar" ] = value; }						/**		 * @return 		 */		public function get personalbar():Boolean { return _props[ "personalbar" ]; }		/**		 * @private		 */		public function set personalbar( value:Boolean ):void { _props[ "personalbar" ] = value; }						/**		 * @return 		 */		public function get titlebar():Boolean { return _props[ "titlebar" ]; }		/**		 * @private		 */		public function set titlebar( value:Boolean ):void { _props[ "titlebar" ] = value; }						/**		 * @return 		 */		public function get toolbar():Boolean { return _props[ "toolbar" ]; }		/**		 * @private		 */		public function set toolbar( value:Boolean ):void { _props[ "toolbar" ] = value; }						/**		 * @return 		 */		public function get scrollbars():Boolean { return _props[ "scrollbars" ]; }		/**		 * @private		 */		public function set scrollbars( value:Boolean ):void { _props[ "scrollbars" ] = value; }						/**		 * @return 		 */		public function get hotkeys():Boolean { return _props[ "hotkeys" ]; }		/**		 * @private		 */		public function set hotkeys( value:Boolean ):void { _props[ "hotkeys" ] = value; }						/**		 * @return 		 */		public function get directories():Boolean { return _props[ "directories" ]; }		/**		 * @private		 */		public function set directories( value:Boolean ):void { _props[ "directories" ] = value; }						/**		 * @return 		 */		public function get alwaysRaised():Boolean { return _props[ "alwaysRaised" ]; }		/**		 * @private		 */		public function set alwaysRaised( value:Boolean ):void { _props[ "alwaysRaised" ] = value; }						/**		 * @return 		 */		public function get alwaysLowered():Boolean { return _props[ "alwaysLowered" ]; }		/**		 * @private		 */		public function set alwaysLowered( value:Boolean ):void { _props[ "alwaysLowered" ] = value; }						/**		 * @return 		 */		public function get dependent():Boolean { return _props[ "dependent" ]; }		/**		 * @private		 */		public function set dependent( value:Boolean ):void { _props[ "dependent" ] = value; }		/* Constructor ......................................................................................*/			/**		 * @param url			URL of the HTML page to open.		 * @param windowName	A string specifying the window name to use in the <code>TARGET</code> attribute of a <code>FORM</code> or <code>A</code> tag. <code>windowName</code> can contain only alphanumeric or underscore (_) characters.		 * @param width			Width of the new window, in pixels.		 * @param height		Height of the new window, in pixels.		 * @param resizable		If <code>true</code>, allows a user to resize the window.		 * @param locationBar	If <code>true</code>, creates a Location entry field.		 * 		 * TODO: Finish Documentation		 */		public function PopupWindow( 	url:String, 										windowName:String, 										width:int=400, 										height:int=300, 										resizable:Boolean=true,										locationBar:Boolean=true, 										scrollBars:Boolean=true, 										menuBar:Boolean=true, 										titleBar:Boolean=true, 										personalBar:Boolean=true, 										toolBar:Boolean=true )		{			_props = new Object();			this.url = url;			this.windowName = windowName;			this.width = width;			this.height = height;			this.resizable = resizable;			this.location = locationBar;			this.scrollbars = scrollBars;			this.menubar = menuBar;			this.titlebar = titleBar;			this.personalbar = personalBar;			this.toolbar = toolBar;		}		/* Public Methods .....................................................................................*/		/**		 * @return A string formatted for the <code>features</code> argument		 * in the window.open() javascript method.		 */		public function generateFeatures():String		{			var features:String = "";						var i:int = 0;			for ( var key:String in _props )			{				if ( key != "url" && key != "windowName" )				{					var value:* = _props[ key ];					if ( i > 0 ) features += ",";										if ( value is Boolean )					{						var boolValue:String = ( value ) ? YES : NO;						features += key + "=" + boolValue;					}					else if ( value ) features += key + "=" + value;					i++;				}			}//			Log.debug( "[PopupWindow] generateString() ", "Generated Features: " + features );			return features;		}	}}