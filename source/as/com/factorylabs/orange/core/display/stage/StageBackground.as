package com.factorylabs.orange.core.display.stage{	import com.factorylabs.orange.core.display.FSprite;	import com.factorylabs.orange.core.display.graphics.FRectangle;	import com.factorylabs.orange.core.display.graphics.fills.IFill;	import com.factorylabs.orange.core.display.graphics.fills.SolidFill;	import com.factorylabs.orange.core.gc.IDisposable;		import flash.display.DisplayObjectContainer;	import flash.display.Stage;	import flash.events.Event;			/**	 * Draws the application background.	 * 	 * <p>This class listens for stage resize events and redraws the background to fill the entire area.</p>	 * 	 *	Copyright 2007 by Factory Design Labs, All Rights Reserved.	 *	<a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author 		Grant Davis, Matthew Kitt	 * @version		1.0.0 :: 10.31.2007	 * @version		1.5.0 :: 03.06.2009 :: Simplified and lightened to remove StageInfo object.	 * @since		1.0.0	 */	public class StageBackground 		extends FSprite			implements IDisposable	{/* * PROPERTIES**************************************************************************************************** */		/**		 * Fill to apply to the background.		 */		protected var _fill					:IFill;				/**		 * Width of the application, used in calculating offset values with alignments other than TOP_LEFT.		 */		protected var _appWidth				:int;				/**		 * Height of the application, used in calculating offset values with alignments other than TOP_LEFT.		 */		protected var _appHeight			:int;				/**		 * The x position of the background, this may be offset from 0 with alignments other than TOP_LEFT.		 */		protected var _backgroundX			:int;				/**		 * The y position of the background, this may be offset from 0 with alignments other than TOP_LEFT.		 */		protected var _backgroundY			:int;				/**		 * The current <code>stage.stageWidth</code>.		 */		protected var _backgroundWidth		:int;				/**		 * The current <code>stage.stageHeight</code>.		 */		protected var _backgroundHeight		:int;		/* * PROPERTY ACCESS**************************************************************************************************** */		/**		 * @return the fill object to use in drawing the background.		 */		public function get fill() :IFill { return _fill; }		public function set fill( v_fill :IFill ) :void		{			_fill = v_fill;		}/* * CONSTRUCTOR**************************************************************************************************** */				/**		 * Creates the StageBackground instance. 		 * @param holder		The container object to create the background in.		 * @param v_appWidth	The default width of the application.		 * @param v_appHeight	The default height of the application.		 * @param fill			Implementation of an IFill object to apply to the stage.		 * @param initObj		Overridable properties. 		 * 		 * @example The following code creates a background for the stage.	 	 * <listing version="3.0" >	 	 * _stageBackground = new StageBackground( _document, _config.appWidth, _config.appHeight, new SolidFill( 0x000000 ) );	 	 * </listing>		 */				public function StageBackground( holder :DisplayObjectContainer, v_appWidth :int, v_appHeight :int, fill :IFill = null, initObj :Object = null )		{			super( holder, initObj );			stage.addEventListener( Event.RESIZE, onResize );			_appWidth = v_appWidth;			_appHeight = v_appHeight;			_fill = ( fill != null ) ? fill : new SolidFill( 0x000000 );			initialize();		}				/**		 * @inheritDoc		 */		override public function toString() :String 		{			return "com.factorylabs.orange.core.display.stage.StageBackground";		}/* * PUBLIC ACCESS**************************************************************************************************** */				/**		 * Forces the background to reset its properties and redraw itself.		 */		public function redraw() :void		{			setBackgroundProperties();			draw();		}				/**		 * @inheritDoc		 */		public function dispose() :void		{			stage.removeEventListener( Event.RESIZE, onResize );			graphics.clear();		}/* * INTERNAL ACCESSS**************************************************************************************************** */		/**		 * Initializes the StageBackground properties.		 * <p>Subclass this method to customize how the initialization process occcurs.</p> 		 */		protected function initialize() :void		{			redraw();		}				/**		 * Sets the current properties for a stage backgrounds dimensions and coordinates. 		 * <p>Subclass this method to customize how the background properties are set.</p> 		 */		protected function setBackgroundProperties() :void		{			_backgroundWidth = stage.stageWidth;			_backgroundHeight = stage.stageHeight;			_backgroundX = Math.round( ( _appWidth - _backgroundWidth ) / 2 );			_backgroundY = Math.round( ( _appHeight - _backgroundHeight ) / 2 );		}		/**		 * Draws the background. 		 * <p>Subclass this method to customize how the background is drawn.</p>		 */		protected function draw() :void		{			graphics.clear();			new FRectangle( graphics, _backgroundX, _backgroundY, _backgroundWidth, _backgroundHeight, _fill );		}/* * EVENT HANDLING**************************************************************************************************** */		/**		 * Captures resize events from the stage and instructs the properties to reset and the background to redraw.		 * <p>Subclass this method to customize how the stage events are captured.</p> 		 * @param e	Event object fired on Event.RESIZE		 */		protected function onResize( e :Event ) :void 		{			redraw();		}	}}