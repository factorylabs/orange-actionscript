package com.factorylabs.orange.core.display.stage{	import com.factorylabs.orange.core.gc.IDisposable;		import flash.display.Stage;	import flash.events.Event;	
	/** 	 * Provides a central location for stage information.  	 *  	 * This class contains information on current stage width/height, 	 * and x/y positions for the top left corner.  	 *  	 * Copyright 2007 by Factory Design Labs, All Rights Reserved. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Grant 	 * @version		1.0.0 :: Dec 4, 2007 	 * @version		1.1.0 :: March 9, 2009 :: Removed the dependency to Configuration, initialization must have a width and height provided.  	 */	public final class StageInfo		implements IDisposable 	{		/* Properties ......................................................................................*/		/**		 * Single instance of StageInfo object.		 */		private static var _instance:StageInfo;				/**		 * Reference to stage object.		 */		private var _stage:Stage;				/**		 * Application width.		 */		private var _appWidth:Number;				/**		 * Application height.		 */		private var _appHeight:Number;				/**		 * the x value of the stage's left side.		 */		private var _x:Number;				/**		 * the y value of the top of the stage.		 */		private var _y:Number;				/**		 * Width value of the stage.		 */		private var _width:int;				/**		 * Height value of the stage. 		 */		private var _height:int;				/**		 * Current stage scale compared to configuration stage width/height. 		 */		private var _scaleX:Number;						/**		 * Current stage scale compared to configuration stage width/height.		 */		private var _scaleY:Number;/* Constructor ......................................................................................*/			/**		 * Empty constructor. 		 */		public function StageInfo( enforcer:SingletonEnforcer ) {}		/* Singleton Instance Accessor ......................................................................................*/				/**		 * @return  single instance of the StageInfo class.		 */		public static function get instance() :StageInfo { return getInstance(); }		public static function getInstance():StageInfo		{			if ( _instance == null ) _instance = new StageInfo( new SingletonEnforcer() );			return _instance;			}/* Public Methods .....................................................................................*/		/**		 * Entry point for this class. Initialize must be called and passed		 * a reference to the stage to begin updating. 		 * 		 * @param stage			Reference to the application's stage.		 * @param v_appWidth 	The default application width.		 * @param v_appHeight	The default application height.		 * 		 * <listing version="3.0" >		 * // first time call to initialize the StageInfo object:		 * StageInfo.getInstance().initialize( _document.stage, 980, 580 );  		 * </listing>		 */		public final function initialize( stage :Stage, v_appWidth :int, v_appHeight :int ):void		{			_stage = stage;						// listen to stage with high priority so the values are internally updated			// before another object listening to stage resize is called.			_stage.addEventListener( Event.RESIZE, onResize, false, 999 );						// pull out app width and height and store as initial w/h. 			_appWidth = _width = v_appWidth;			_appHeight = _height = v_appHeight;						_scaleX = 1;			_scaleY = 1;						// update values. 			onResize( null );		}				/**		 * @inheritDoc		 */		public function dispose():void		{			if ( _stage ) _stage.removeEventListener( Event.RESIZE, onResize );		}/* Event Handlers......................................................................................*/				/**		 * Handles resize events from the stage and properly 		 * adjusts placement of objects based on the app size 		 * defined by Configuration.		 * 		 * @param evt 	Event object dispatched by the stage. 		 */		private final function onResize( evt:Event ):void		{			_width = _stage.stageWidth;			_height = _stage.stageHeight;			_x = ( _appWidth - _width ) / 2;			_y = ( _appHeight - _height ) / 2;			_scaleX = _width / _appWidth;			_scaleY = _height / _appHeight;		}/* Getters/Setters ......................................................................................*/		/**		 * @return The y position of the bottom of the stage. 		 */		public function get bottom():Number		{			return _height + _y;		}				/**		 * @return The y position of the top of the stage. 		 */		public function get top():Number		{			return _y;		}				/**		 * @return The x position of the right of the stage. 		 */		public function get right():Number		{			return _x + _width;		}				/**		 * @return The x position of the left of the stage. 		 */		public function get left():Number		{			return _x;		}		/**		 * @return  the x value of the stage's left side.		 */		public final function get stageX():Number		{			return _x;		}		/**		 * @return  the y value of the top of the stage		 */		public final function get stageY():Number		{			return _y;		}				/**		 * @return	the width of the stage		 */		public final function get stageWidth():Number		{			return _width;		}				/**		 * @return the height of the stage		 */		public final function get stageHeight():Number		{			return _height;		}				/**		 * @return	a reference to the stage object.		 */		public final function get stage():Stage		{			return _stage;		}				/**		 * @return the current stage x scale.		 */		public function get scaleX():Number		{			return _scaleX;		}				/**		 * @return the current stage y scale.		 */		public function get scaleY():Number		{			return _scaleY;		}				/**		 * @return	the current application width used in generating offset positions.		 */		public function get appWidth() :int { return _appWidth; }		public function set appWidth( v_appWidth :int ) :void		{			_appWidth = v_appWidth;		}				/**		 * @return	the current application height used in generating offset positions.		 */		public function get appHeight() :int { return _appHeight; }		public function set appHeight( v_appHeight :int ) :void		{			_appHeight = v_appHeight;		}	}}internal class SingletonEnforcer {}