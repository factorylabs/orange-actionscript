package com.factorylabs.orange.core.display{	import com.factorylabs.orange.core.errors.IllegalDisplayInitParamError;
	import com.factorylabs.orange.core.logger.Log;
	
	import flash.display.BitmapData;
	import flash.display.DisplayObjectContainer;	
	/**	 * FBitmapText is an FTextField, immediately turned into a bitmap, for performance reasons.	* 	* <p><code>FBitmapText</code> inheritley performs some of the more mundane tasks for setting up and	* using TextFields in the application. <code>FBitmapText</code> works similar to <code>FSprite</code> and <code>FMovieClip</code> in its	* instantiation, and has time-saving actions such as wrapping span tags around text when setting the TextField value.</p>	*     * @author Justin Gitlin    * @version 1.0	*/	public class FBitmapText		extends FSprite	{    /* Properties ......................................................................................*/		/* Constructor ......................................................................................*/		        public function FBitmapText( holder:DisplayObjectContainer = null, textInit:Object = null, smooth:Boolean = false )		{			super( holder );						build( textInit, smooth );		}        /* Public Methods .....................................................................................*/				/**		* @return	the string equivalent of this class. 		*/		public override function toString():String		{			return "[ com.factorylabs.orange.core.display.FBitmapText ]";		}		/* Protected Methods ......................................................................................*/				/**		 * Build the FTextField, take a snapshot, and get rid of the textfield		 */		protected function build( textInit:Object = null, smooth:Boolean = false ):void		{			var txt:FTextField = new FTextField( this, textInit );						// reapply the entire init object - should be split into TextField and FTextField init objects			initTxt( txt, textInit );						createBitmap( smooth );						this.removeChild( txt );						txt = null;		}				/**		 * Maps all the init object's properties to this Sprite.		 * If there are properties that do not exist in the Sprite base class, an error is thrown. 		 * 		 * @param init	Object to map properties from. 		 */		protected function initTxt( txt:FTextField, init:Object ):void		{			for( var it:String in init )			{				if( txt.hasOwnProperty( it ) ) txt[ it ] = init[ it ];				else				{					Log.error( "[FBitmapText] initTxt()", "{ " + it + ":" + init[ it ] + " }" );					throw new IllegalDisplayInitParamError( "An invalid property assignment was attempted on " + txt.toString() );				}			}		}				/**		 * Creates the bitmap snapshot		 */		private function createBitmap( smooth:Boolean = false ):FBitmap		{			var bmpData:BitmapData = new BitmapData( Math.ceil( this.width ), Math.ceil( this.height ), true, 0x000000 );			bmpData.draw( this, null, null, null, null, smooth );			var bmp:FBitmap = new FBitmap( this, bmpData );			return bmp;		}		/* Getters/Setters ......................................................................................*/			}}