package com.factorylabs.orange.core.display.buttons.styles{	import com.factorylabs.orange.core.collections.Map;	import com.factorylabs.orange.core.display.FSprite;	import com.factorylabs.orange.core.display.FTextField;	import com.factorylabs.orange.core.display.buttons.ButtonStateNew;	import com.factorylabs.orange.core.display.buttons.FButtonNew;	import com.factorylabs.orange.core.display.graphics.FRectangle;	import com.factorylabs.orange.core.display.graphics.fills.IFill; 	import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.text.TextFieldAutoSize;	/**	 * Provides a simple style for a single-line text field with a background color.  	 *  	 * <p>TextButtonStyle provides a simple API to set colors and fills for the text and background, respectively.</p> 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		grantdavis 	 * @version		1.0.0 :: Oct 8, 2009 	 */	public class TextButtonStyle 		extends FSprite			implements IButtonStyle	{/* * PROPERTIES**************************************************************************************************** */		private var _textColors : Map;		private var _backgroundFills : Map;		private var _text : FTextField;		private var _padding : Number;		private var _width : Number;		private var _height : Number;/* * PROPERTY ACCESS**************************************************************************************************** */			public function get textfield() : FTextField		{			return _text;		}	/* * CONSTRUCTOR**************************************************************************************************** */			public function TextButtonStyle( label : String, span : String, textPadding : Number = 10, width : Number = NaN, height : Number = NaN )		{			_width = width;			_height = height;			_padding = textPadding;						_textColors = new Map();			_backgroundFills = new Map();						_text = new FTextField( this, { x:_padding, y:_padding } );			_text.autoSize = TextFieldAutoSize.LEFT;			_text.embedFonts = false;			_text.span = span;			_text.label = label;						if ( !isNaN( width ))			{				_width = width;				_text.width = width - _padding * 2;			}			else _width = _text.width + _padding * 2;						if ( !isNaN( height ))			{				_height = height;				_text.height = height - _padding * 2;				if ( _text.height < _height )					_text.y = _height * .5 - _text.height * .5;			}			else _height = _text.height + _padding * 2;		}				public override function toString() : String 		{			return "com.factorylabs.orange.core.display.buttons.styles.TextButtonStyle";		}/* * PUBLIC ACCESS**************************************************************************************************** */		/**		 * Assigns a text color for specific button state.		 */		public function setTextColorForState( state : ButtonStateNew, color : uint ) : void		{			_textColors.add( state, color, true );		}				/**		 * Assigns a text color for specific mouse event.		 */		public function setTextColorForMouseEvent( eventType : String, color : uint ) : void		{			_textColors.add( eventType, color, true );		}				/**		 * Assigns a background fill for specific button state.		 */		public function setBackgroundFillForState( state : ButtonStateNew, fill : IFill ) : void		{			_backgroundFills.add( state, fill, true );		}				/**		 * Assigns a background fill for specific mouse event.		 */		public function setBackgroundFillForMouseEvent( eventType : String, fill : IFill ) : void		{			_backgroundFills.add( eventType, fill, true );		}		/**		 * @inheritDoc		 */		public function getStyleForState( state : ButtonStateNew, button : FButtonNew ) : DisplayObject		{			updateTextColorWithKey( state );			updateBackgroundFillWithKey( state );			return this;		}				/**		 * @inheritDoc		 */		public function getStyleForMouseEvent( event : MouseEvent, button : FButtonNew ) : DisplayObject		{			var hasTextStyle : Boolean = updateTextColorWithKey( event.type );			var hasBackgroundStyle : Boolean = updateBackgroundFillWithKey( event.type );			// if there isn't a defined style for the event, use the state style. 			if ( !hasTextStyle ) updateTextColorWithKey( button.state );			if ( !hasBackgroundStyle ) updateBackgroundFillWithKey( button.state );			return this;		}/* * INTERNAL ACCESS**************************************************************************************************** */				protected function updateTextColorWithKey( key : * ) : Boolean		{			var hasValue : Boolean = false;			if ( _textColors.hasKey( key ))			{				hasValue = true;				_text.textColor = _textColors.get( key ) as uint;			}			return hasValue;		}				protected function updateBackgroundFillWithKey( key : * ) : Boolean		{			var hasValue : Boolean = false;			if ( _backgroundFills.hasKey( key ))			{				hasValue = true;				draw( _backgroundFills.get( key ) as IFill );			}			return hasValue;		}				/**		 * Draws background shape of button		 */		protected function draw( fill : IFill ):void		{			this.graphics.clear();			new FRectangle( this.graphics, 0, 0, _width, _height, fill );		}/* * EVENT HANDLING**************************************************************************************************** */	}}