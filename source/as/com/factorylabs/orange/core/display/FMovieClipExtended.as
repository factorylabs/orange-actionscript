package com.factorylabs.orange.core.display{	import flash.display.DisplayObjectContainer;	import flash.geom.Point;	import flash.geom.Rectangle;		/**	* FMovieClipExtendedExtended is the base class that should be used for all	* custom MovieClip subclasses that we create.	* 	* Copyright 2008 by Factory Design Labs, All Rights Reserved.	* <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	* 	* @author Sean Dougherty    * @version 1.0	*/	public class FMovieClipExtended		extends FMovieClip	{		/* Properties ......................................................................................*/		protected var _bounds:Rectangle;		protected var _offset:Point;/* Constructor ......................................................................................*/				/**		* FMovieClipExtendedExtended is the basic building block for display objects that have timelines.		*		* <p>Meant to be used in place of the native flash <code>MovieClip</code> class.</p>		* 		* @param holder The <code>DisplayObject</code> to add this <code>FMovieClipExtendedExtended</code> to. If null this <code>FMovieClipExtendedExtended</code> will not automatically		* be added to the display tree of another <code>DisplayObject</code>.		* @param init Object containting all parameters to automatically asign upon instantiation.		* @example The following code is the simplest example of how to use <code>FMovieClipExtendedExtended</code>. 		* <listing version="3.0" >		* // assumes holder is an existing display object		* // mc will be added to holder's display list and set to an x and y position of 10		* var mc:FMovieClipExtendedExtended = new FMovieClipExtendedExtended( holder, { x:10, y:10 } );  		* </listing>		*/        public function FMovieClipExtended( holder:DisplayObjectContainer=null, init:Object=null )		{				super( holder, init );		}        /* Public Methods .....................................................................................*/				/**		* @return	the string equivalent of this class. 		*/		public override function toString():String		{			return "[ com.factorylabs.orange.core.display.FMovieClipExtendedExtended ]";		}				/**		 * Snaps FMovieClipExtendedExtended to pixel		 */		public function snapToPixel():void		{			this.globalX = Math.round( this.globalX );			this.globalY = Math.round( this.globalY );		}		/* Protected Methods ......................................................................................*//* Getters/Setters ......................................................................................*/		/**		 * Gets the x position of the sprite.		 */		public override function get x():Number		{			return (_offset) ? _offset.x + super.x : super.x;		}				/**		 * Gets the y position of the sprite.		 */		public override function get y():Number		{			return (_offset) ? _offset.y + super.y : super.y;		}				/**		 * Gets the width of the sprite.		 */		public override function get width():Number		{			return (_bounds) ? _bounds.width : super.width;		}				/**		 * Gets the height of the sprite.		 */		public override function get height():Number		{			return (_bounds) ? _bounds.height : super.height;		}		/**		 * Sets the bounds object of the sprite. This redines width and height values		 * for external calculations.		 */		public function get bounds():Rectangle		{			return _bounds;		}		/**		 * @private		 */		public function set bounds( value:Rectangle ):void		{			_bounds = value;			// force a refresh of current width and height			width = width;			height = height;		}						/**		 * Sets the offset object of the sprite. This is a Point object that redefines		 * the 0,0 of the sprite.		 */		public function set offset( value:Point ):void		{			_offset = value;						// force a refresh of current x and y			x = x;			y = y;		}				/**		 * get the offset object of the sprite		 */		public function get offset():Point		{			return _offset;		}									/**		 * Sets the x positon of the sprite as if were on the document root stage		 */		public function get globalX():Number		{			return parent.localToGlobal( new Point(x,y) ).x;		}				/**		 * @private		 */		public function set globalX( value:Number ):void		{			x = parent.globalToLocal( new Point( value, y ) ).x;		}														/**		 * Set the y positon of the sprite as if were on the document root stage		 */		public function get globalY():Number		{			return parent.localToGlobal( new Point(x,y) ).y;		}				/**		 * @private		 */		public function set globalY(value:Number):void		{			y = parent.globalToLocal( new Point( x, value ) ).y;		}		/**		 * Gets the right edge of the sprite.		 */		public function get right():Number		{			return x + width;		}				/**		 * @private		 */		public function set right(value:Number):void		{			x = value - width;		}						/**		 * @private		 */		public function set left(value:Number):void		{			x = value;		}				/**		 * get the left edge of the sprite		 */		public function get left():Number		{			return x;		}				/**		 * @private		 */		public function set bottom(value:Number):void		{			y = value - height;		}				/**		 * get the bottom edge of the sprite		 */		public function get bottom():Number		{			return y + height;		}		/**		 * get the top edge of the sprite		 */		public function get top():Number		{			return y;		}				/**		 * @private		 */		public function set top(value:Number):void		{			y = value;		}				/**		 * @return A Point object specifying the coordinates of the sprite.		 */		public function get position():Point		{			return new Point( x,y );		}				/**		 * @private		 */		public function set position( value:Point ):void		{			x = value.x;			y = value.y;		}										/**		 * @return A Point object specifying the coordinates of the sprite as if were on the document root stage.		 */		public function get globalPosition():Point		{			return parent.localToGlobal( new Point(x,y) );		}		/**		 * @private		 */		public function set globalPosition( value:Point ):void		{			var globalPoint:Point = parent.globalToLocal( value ); 			x = globalPoint.x;			y = globalPoint.y;		}			}}