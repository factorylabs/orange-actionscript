package com.factorylabs.orange.core.display.graphics.fills {	import com.factorylabs.orange.core.display.graphics.IGraphic;	import com.factorylabs.orange.core.display.graphics.fills.IFill;		import flash.display.Graphics;	import flash.errors.IllegalOperationError;	import flash.geom.Matrix;		/**	 * GradientFill applies properties for rendering a gradient within a Graphic.	 * 	 * For a description of the built in <code>Graphics.beginGradientFill()</code> method see <code><a href="http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/Graphics.html#beginGradientFill()">beginGradientFill</a></code>.	 * 	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p>	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jun 1, 2008	 */	public class GradientFill 		implements IFill 	{		/* Properties ......................................................................................*/		private var _rotation : Number;		private var _colors : Array;		private var _alphas : Array;		private var _ratios : Array;		private var _type : String;		private var _spreadMethod : String;		private var _interpolationMethod : String;		private var _focalPointRatio : Number;		/* Getters/Setters .................................................................................*/				/**		 * @return	the rotation angle for the gradient.		 */		public function get rotation() : Number		{			return _rotation;		}		public function set rotation( vRotation : Number ) : void		{			_rotation = vRotation;		}				/**		 * @return	the <code>Array</code> of colors in the gradient.		 */		public function get colors() : Array		{			return _colors;		}		public function set colors( vColors : Array ) : void		{			_colors = vColors;		}				/**		 * @return	the <code>Array</code> of alphas in the gradient.		 */		public function get alphas() : Array		{			return _alphas;		}		public function set alphas( vAlphas : Array ) : void		{			_alphas = vAlphas;		}				/**		 * @return	the <code>Array</code> of ratios in the gradient.		 */		public function get ratios() : Array		{			return _ratios;		}		public function set ratios( vRatios : Array ) : void		{			_ratios = vRatios;		}				/**		 * @return	the <code>flash.display.GradientType</code> in the gradient.		 */		public function get type() : String		{			return _type;		}		public function set type( vType : String ) : void		{			_type = vType;		}				/**		 * @return	the <code>flash.display.SpreadMethod</code> in the gradient.		 */		public function get spreadMethod() : String		{			return _spreadMethod;		}		public function set spreadMethod( vSpreadMethod : String ) : void		{			_spreadMethod = vSpreadMethod;		}				/**		 * @return	the <code>flash.display.InterpolationMethod</code> in the gradient.		 */		public function get interpolationMethod() : String		{			return _interpolationMethod;		}		public function set interpolationMethod( vInterpolationMethod : String ) : void		{			_interpolationMethod = vInterpolationMethod;		}				/**		 * @return	the focal point of the gradient.		 */		public function get focalPointRatio() : Number		{			return _focalPointRatio;		}		public function set focalPointRatio( vFocalPointRatio : Number ) : void		{			_focalPointRatio = vFocalPointRatio;		}		/* Constructor .....................................................................................*/						/**		 * Constructs a new gradient fill.		 * @param vRotation				The degree amount used in the <code>Matrix.createGradientBox</code> to rotate the gradient.		 * @param vColors				An array (up to 15) of RGB hexadecimal color values to be used in the gradient. For each color, be sure to specify a corresponding value in the alphas and ratios parameters. If <code>null</code> the array <code>[ 0xffffff, 0x000000 ]</code> will be used.		 * @param vAlphas				An array of alpha values for the corresponding colors in the colors array; valid values are 0 to 1. If <code>null</code> the array <code>[ 1, 1 ]</code> will be used.		 * @param vRatios				An array of color distribution ratios; valid values are 0 to 255. This value defines the percentage of the width where the color is sampled at 100%. The value 0 represents the left-hand position in the gradient box, and 255 represents the right-hand position in the gradient box. If <code>null</code> the array <code>[ 0, 255 ]</code> will be used.		 * @param vType					A value from the <code>GradientType</code> class that specifies which gradient type to use: <code>GradientType.LINEAR</code> or <code>GradientType.RADIAL</code>.		 * @param vSpreadMethod			A value from the <code>SpreadMethod</code> class that specifies which spread method to use, either: <code>SpreadMethod.PAD</code>, <code>SpreadMethod.REFLECT</code>, or <code>SpreadMethod.REPEAT</code>.		 * @param vInterpolationMethod	A value from the <code>InterpolationMethod</code> class that specifies which value to use: <code>InterpolationMethod.linearRGB</code> or <code>InterpolationMethod.RGB</code>.		 * @param vFocalPointRatio		A number that controls the location of the focal point of the gradient. 0 means that the focal point is in the center. 1 means that the focal point is at one border of the gradient circle. -1 means that the focal point is at the other border of the gradient circle. A value less than -1 or greater than 1 is rounded to -1 or 1.		 * 		 * @example The following code creates a Gradient Fill. 	 	 * <listing version="3.0" >	 	 * var gf : GradientFill = new GradientFill( 90, [ 0xffffff, 0xbcbec0, 0xd1d3d4], [ 1, 1, 0 ], [ 0, 127, 255 ], GradientType.LINEAR, SpreadMethod.PAD, InterpolationMethod.RGB, 0 );	 	 * </listing>		 */		public function GradientFill( vRotation : Number = 0, vColors : Array = null, vAlphas : Array = null, vRatios : Array = null, vType : String = "linear", vSpreadMethod : String = "pad", vInterpolationMethod : String = "rgb", vFocalPointRatio : Number = 0 )		{			_rotation = vRotation;					_colors = ( vColors != null ) ? vColors : [ 0xffffff, 0x000000 ];			_alphas = ( vAlphas != null ) ? vAlphas : [ 1, 1 ];			_ratios = ( vRatios != null ) ? vRatios : [ 0, 255 ];			_type = vType;			_spreadMethod = vSpreadMethod;			_interpolationMethod = vInterpolationMethod;			_focalPointRatio = vFocalPointRatio;		}		/* Public Methods ..................................................................................*/					/**		 * @return	the string equivalent of this class.		 */		public function toString() : String 		{			return "com.factorylabs.orange.core.display.graphics.fills.GradientFill";		}				/**		 * @inheritDoc		 */		public function beginFill( gfx : Graphics, fgfx : IGraphic ) : void		{			validate();			var matrix : Matrix = new Matrix();			matrix.createGradientBox( fgfx.width, fgfx.height, degreesToRadians( _rotation ), fgfx.x, fgfx.y );			gfx.beginGradientFill( _type, _colors, _alphas, _ratios, matrix, _spreadMethod, _interpolationMethod, _focalPointRatio );		}				/**		 * @inheritDoc		 */		public function endFill( gfx : Graphics ) : void		{			gfx.endFill();		}		/* Private Methods .................................................................................*/				/**		 * Validates the arrays used all have the same length.		 * @throws	flash.errors.IllegalOperationError The arrays for colors, alphas, ratios must all be the same length.		 */		private function validate() : void		{			var cl : Number = _colors.length;			var rl : Number = _ratios.length;			var al : Number = _alphas.length;			if( cl != al || cl != rl  || al != cl || al != rl )				throw new IllegalOperationError( toString() + " : has unequal values for the Arrays: colors, alphas, ratios." );		}				/**		 *	Convert a number from Degrees to Radians.		 *	@param	d		degrees (45°, 90°)		 *	@return 		radians (3.14..., 1.57...)		 * 	@use			{@code var vRadians:Number = MathUtil.degreesToRadians( 180 );}		 */		private function degreesToRadians( d:Number ):Number 		{			return d * ( Math.PI / 180 );		}			}}