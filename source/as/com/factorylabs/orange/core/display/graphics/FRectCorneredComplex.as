package com.factorylabs.orange.core.display.graphics {	import flash.display.Graphics;		import com.factorylabs.orange.core.display.graphics.FRectRoundComplex;	import com.factorylabs.orange.core.display.graphics.fills.IFill;		/**	 * Draws a cornered rectangle shape with an option to apply different values for individual corners.	 * 	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p>	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jun 4, 2008	 */	public class FRectCorneredComplex		extends FRectRoundComplex 	{		/* Constructor .....................................................................................*/			/**		 * Constructs and draws a cornered rectangle shape with an option to apply different values for individual corners.		 * @param gfx			Reference to the <code>shape.graphics</code> where the shape will be drawn into.		 * @param xp			A number indicating the horizontal position relative to the registration point of the parent display object.		 * @param yp			A number indicating the vertical position relative to the registration point of the parent display object.		 * @param wv			The width of the shape.		 * @param hv			The height of the shape.		 * @param vFill			Fill or line style to apply the shape.		 * @param tl			The top left corner value.		 * @param tr			The top right corner value. 		 * @param bl			The bottom left corner value.		 * @param br			The bottom right corner value.		 * @param vCenter		Whether to center the shape or not. 		 * @param vAutoRedraw	Determines if the graphic should auto redraw when a setter is called.		 * 		 * @example The following code creates a complex cornered rectangle.	 	 * <listing version="3.0" >	 	 * var sf : SolidFill = new SolidFill( 0x666666, .8 );	 	 * var r1 : FRectCorneredComplex = new FRectCorneredComplex( _gfx.graphics, 0, 0, 200, 100, sf, 10, 10, 0, 0 );	 	 * </listing>		 */				public function FRectCorneredComplex( gfx : Graphics, xp : Number = 0, yp : Number = 0, wv : Number = 10, hv : Number = 10, vFill : IFill = null, tl : Number = 0, tr : Number = 0, bl : Number = 0, br : Number = 0, vCenter : Boolean = false, vAutoRedraw : Boolean = true )		{			super( gfx, xp, yp, wv, hv, vFill, tl, tr, bl, br, vCenter, vAutoRedraw );		}		/* Public Methods ..................................................................................*/				/**		 * @return	the string equivalent of this class.		 */		override public function toString() : String 		{			return "com.factorylabs.orange.core.display.graphics.FRectCorneredComplex";		}		/* Protected Methods ...............................................................................*/						override protected function drawGraphic() : void		{			// make sure our radius is not greater than either a width or height value.			if( _topLeft > Math.min( _w, _h ) / 2) _topLeft = Math.min( _w, _h ) / 2;			if( _topRight > Math.min( _w, _h ) / 2) _topRight = Math.min( _w, _h ) / 2;			if( _bottomLeft > Math.min( _w, _h ) / 2) _bottomLeft = Math.min( _w, _h ) / 2;			if( _bottomRight > Math.min( _w, _h ) / 2) _bottomRight = Math.min( _w, _h ) / 2;					// draw, fill and close.			_gfx.moveTo( 0, 0 );			_gfx.moveTo( x + _topLeft, _y );			_gfx.lineTo( x + _w - _topRight, _y );			_gfx.lineTo( x + _w, _y + _topRight );						_gfx.lineTo( x + _w, _y + _h - _bottomRight );			_gfx.lineTo( x + _w - _bottomRight, _y + _h );			_gfx.lineTo( x + _bottomLeft, _y + _h );			_gfx.lineTo( x, _y + _h - _bottomLeft );			_gfx.lineTo( x, _y + _topLeft );			_gfx.lineTo( x + _topLeft, _y );		}	}}