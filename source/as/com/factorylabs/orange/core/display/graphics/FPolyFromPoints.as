package com.factorylabs.orange.core.display.graphics {	import flash.display.Graphics;		import com.factorylabs.orange.core.display.graphics.fills.IFill;		/**	 * Draws a polygon shape from a compound array of <code>x</code> and <code>y</code> coordinates.	 * 	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p>	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jun 3, 2008	 */	public class FPolyFromPoints		extends Graphic 	{/* Properties ......................................................................................*/				protected var _points : Array;/* Getters/Setters .................................................................................*/				/**		 * @return	the compound array of coordinates.		 */		public function get points() : Array		{			return _points;		}				public function set points( vPoints : Array ) : void		{			_points = vPoints;			if( _autoRedraw ) redraw();		}				/* Constructor .....................................................................................*/			/**		 * Constructs and draws a polygon from a compound array.		 * @param gfx			Reference to the <code>shape.graphics</code> where the shape will be drawn into.		 * @param vPoints		Compound array of x and y coordinate points.		 * @param vFill			Fill or line style to apply the shape.		 * @param vAutoRedraw	Determines if the graphic should auto redraw when a setter is called.		 * 		 * @example The following code creates a polygon shape.	 	 * <listing version="3.0" >	 	 * var sf : SolidFill = new SolidFill( 0x666666, .8 );	 	 * var p1 : FPolyFromPoints = new FPolyFromPoints( _gfx.graphics, [ [0, 0], [0, 100], [100, 200], [ 350, 300] ], sf );	 	 * </listing>		 */				public function FPolyFromPoints( gfx : Graphics, vPoints : Array, vFill : IFill = null, vAutoRedraw : Boolean = true ) 		{						super( gfx, 0, 0, 10, 10, vFill, false, vAutoRedraw );			_points = vPoints;						// override the dimensions from the array of points.			dimensions();			draw();		}		/* Public Methods ..................................................................................*/				/**		 * @return	the string equivalent of this class.		 */				override public function toString() : String 		{			return "com.factorylabs.orange.core.display.graphics.FPolyFromPoints";		}		/* Protected Methods ...............................................................................*/								/**		 * Procedure for drawing the shape from the array of coordinates.		 */		override protected function drawGraphic() : void		{			// move to the first point.			_gfx.moveTo( _points[ 0 ][ 0 ], _points[ 0 ][ 1 ] );						var al : int = _points.length;						// line to all of the points.			for ( var i : int = 1; i < al ; i++ )			{				_gfx.lineTo( _points[ i ][ 0 ], _points[ i ][ 1 ] );			}						_gfx.lineTo( _x, _y );		}		/* Private Methods .................................................................................*/				/**		 * Handles overriding the values for <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>.		 * Searches the Array of points for max and minimum values.		 */		private function dimensions() : void		{			var al : int = _points.length;				// start with the first point.			_x = _points[ 0 ][ 0 ];			_y = _points[ 0 ][ 1 ];						// coordinates to alter.			var ox : Number = _x;			var oy : Number = _y;				// get the biggest x and y to get the width and height.			var maxX : Number = points[ 0 ][ 0 ];			var maxY : Number = points[ 0 ][ 1 ];				// get the minimum and maximum x and y value from the array, this will be our xp, yp, maxX and maxY.			for ( var i : int = 0; i < al ; i++ )			{					ox = Math.min( ox, points[ i ][ 0 ] );				oy = Math.min( oy, points[ i ][ 1 ] );								maxX = Math.max( maxX, points[ i ][ 0 ] );				maxY = Math.max( maxY, points[ i ][ 1 ] );			}			// set the width and height.			_w = maxX - ox;			_h = maxY - oy;		}	}}