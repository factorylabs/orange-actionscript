package com.factorylabs.orange.core.display.graphics.fills {	import flash.display.Graphics;	import com.factorylabs.orange.core.display.graphics.IGraphic;	import com.factorylabs.orange.core.display.graphics.fills.AbstractSolid;	/**	 * SolidStroke applies properties for rendering a stroke on a Graphic.	 * 	 * For a description of the built in <code>Graphics.lineStyle()</code> method see <code><a href="http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/Graphics.html#lineStyle()">lineStyle</a></code>.	 * 	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p>	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jun 2, 2008	 */	public class SolidStroke		extends AbstractSolid	{		/* Properties ......................................................................................*/				private var _thickness : uint;		private var _pixelHinting : Boolean;		private var _scaleMode : String;		private var _caps : String;		private var _joints : String;		private var _miterLimit : Number;/* Getters/Setters .................................................................................*/				/**		 * @return	the stroke's thickness.		 */		public function get thickness() : uint		{			return _thickness;		}				public function set thickness( vThickness : uint ) : void		{			_thickness = vThickness;		}		/**		 * @return	the value of whether to snap the stroke to full pixels.		 */		public function get pixelHinting() : Boolean		{			return _pixelHinting;		}				public function set pixelHinting( vPixelHinting : Boolean ) : void		{			_pixelHinting = vPixelHinting;		}		/**		 * @return	the <code>flash.display.LineScaleMode</code> used on the stroke.		 */		public function get scaleMode() : String		{			return _scaleMode;		}				public function set scaleMode( vScaleMode : String ) : void		{			_scaleMode = vScaleMode;		}		/**		 * @return	the <code>flash.display.CapsStyle</code> used on the stroke.		 */		public function get caps() : String		{			return _caps;		}				public function set caps( vCaps : String ) : void		{			_caps = vCaps;		}		/**		 * @return	the <code>flash.display.JointStyle</code> used on the stroke.		 */		public function get joints() : String		{			return _joints;		}				public function set joints( vJoints : String ) : void		{			_joints = vJoints;		}		/**		 * @return	the limit of the miter used on the stroke.		 */		public function get miterLimit() : Number		{			return _miterLimit;		}				public function set miterLimit( vMiterLimit : Number ) : void		{			_miterLimit = vMiterLimit;		}/* Constructor .....................................................................................*/				/**		 * Constructs a solid stroke.		 * @param vColor			A hexadecimal color value of the line.		 * @param vAlpha			A number that indicates the alpha value of the color of the line; valid values are 0 to 1.		 * @param vThickness		An integer that indicates the thickness of the line in points; valid values are 0 to 255. The value 0 indicates hairline thickness; the maximum thickness is 255.		 * @param vPixelHinting		A Boolean value that specifies whether to hint strokes to full pixels. This affects both the position of anchors of a curve and the line stroke size itself. With pixelHinting set to true, Flash Player hints line widths to full pixel widths. With pixelHinting set to false, disjoints can appear for curves and straight lines.		 * @param vScaleMode		A value from the <code>LineScaleMode</code> class that specifies which scale mode to use on a stroke. Valid values are: <code>LineScaleMode.NORMAL</code>, <code>LineScaleMode.VERTICAL</code>, <code>LineScaleMode.HORIZONTAL</code>.		 * @param vCaps				A value from the <code>CapsStyle</code> class that specifies the type of caps at the end of lines. Valid values are: <code> CapsStyle.NONE</code>, <code>CapsStyle.ROUND</code>, <code>CapsStyle.SQUARE</code>.		 * @param vJoints			A value from the <code>JointStyle</code> class that specifies the type of joint appearance used at angles. Valid values are: <code>JointStyle.BEVEL</code>, <code>JointStyle.MITER</code>, and <code>JointStyle.ROUND</code>.		 * @param vMiterLimit		A number that indicates the limit at which a miter is cut off. Valid values range from 1 to 255. This value is only used if the <code>jointStyle</code> is set to "miter". The <code>miterLimit</code> value represents the length that a miter can extend beyond the point at which the lines meet to form a joint. The value expresses a factor of the line <code>thickness</code>. For example, with a <code>miterLimit</code> factor of 2.5 and a <code>thickness</code> of 10 pixels, the miter is cut off at 25 pixels.		 * 		 * @example The following code creates a light grey 3pt stroke.	 	 * <listing version="3.0" >	 	 * var ss : SolidStroke = new SolidStroke( 0xcccccc, 1, 3, true, LineScaleMode.NORMAL, CapsStyle.NONE, JointStyle.MITER, 4 );	 	 * </listing>		 */		public function SolidStroke( vColor : uint = 0xff00ff, vAlpha : Number = 1, vThickness : uint = 1, vPixelHinting : Boolean = false, vScaleMode : String = "normal", vCaps : String = "none", vJoints : String = "miter", vMiterLimit : Number = 3 )		{			super( vColor, vAlpha );						_thickness = vThickness;			_pixelHinting = vPixelHinting;			_scaleMode = vScaleMode;			_caps = vCaps;			_joints = vJoints;			_miterLimit = vMiterLimit;		}/* Public Methods ..................................................................................*/				/**		 * @inheritDoc		 */		override public function toString() : String 		{			return "com.factorylabs.orange.core.display.graphics.fills.SolidStroke";		}		/**		 * @inheritDoc		 */		override public function beginFill( gfx : Graphics, fgfx : IGraphic ) : void		{			gfx.lineStyle( _thickness, _color, _alpha, _pixelHinting, _scaleMode, _caps, _joints, _miterLimit );			fgfx = null;		}		/**		 * @inheritDoc		 */		override public function endFill( gfx : Graphics ) : void		{			gfx.moveTo( 0, 0 );		}	}}