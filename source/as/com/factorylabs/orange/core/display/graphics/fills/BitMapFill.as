package com.factorylabs.orange.core.display.graphics.fills {	import com.factorylabs.orange.core.display.graphics.IGraphic;	import com.factorylabs.orange.core.display.graphics.fills.IFill;		import flash.display.BitmapData;	import flash.display.Graphics;	import flash.display.IBitmapDrawable;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Rectangle;		/**	 * Fills a <code>Graphic</code> with a BitMap object.	 * 	 * For a description of the built in <code>Graphics.beginBitmapFill()</code> method see <code><a href="http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/Graphics.html#beginBitmapFill()">beginBitmapFill</a></code>.	 * 	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p>	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jun 1, 2008	 * 	 * TODO:		Have Justin take a look a this class to clean up.	 */	public class BitMapFill		implements IFill 	{		/* Properties ......................................................................................*/				private var _bitMapData : BitmapData;		private var _source : IBitmapDrawable;		private var _repeat : Boolean;		private var _smooth : Boolean;		private var _blendMode : String;		private var _clipRect : Rectangle;		private var _rotation : Number;		private var _colorTransform : ColorTransform;/* Getters/Setters .................................................................................*/				/**		 * @return	The BitmapData object being used.		 */		public function get bitMapData() : BitmapData		{			return _bitMapData;		}				public function set bitMapData( vBitMapData : BitmapData ) : void		{			_bitMapData = vBitMapData;		}				/**		 * @return	Reference to objects that can be passed as the <code>source</code> parameter of the <code>draw()</code> method of the BitmapData class.		 */		public function get source() : IBitmapDrawable		{			return _source;		}				public function set source( vSource : IBitmapDrawable ) : void		{			_source = vSource;		}				/**		 * @return	Whether to repeat the bitmap object within the fill.		 */		public function get repeat() : Boolean		{			return _repeat;		}				public function set repeat( vRepeat : Boolean ) : void		{			_repeat = vRepeat;		}				/**		 * @return	Whether to smooth the bitmap object within the fill.		 */		public function get smooth() : Boolean		{			return _smooth;		}				public function set smooth( vSmooth : Boolean ) : void		{			_smooth = vSmooth;		}				/**		 * @return	The blend filter being used on the bitmap.		 */		public function get blendMode() : String		{			return _blendMode;		}				public function set blendMode( vBlendMode : String ) : void		{			_blendMode = vBlendMode;		}				/**		 * @return	A Rectangle object that defines the area of the source object to draw.		 */		public function get clipRect() : Rectangle		{			return _clipRect;		}				public function set clipRect( vClipRect : Rectangle ) : void		{			_clipRect = vClipRect;		}				/**		 * @return	The rotation of the Bitmap object.		 */		public function get rotation() : Number		{			return _rotation;		}				public function set rotation( vRotation : Number ) : void		{			_rotation = vRotation;		}				/**		 * @return	The color transformation used on the Bitmap.		 */		public function get colorTransform() : ColorTransform		{			return _colorTransform;		}				public function set colorTransform( vColorTransform : ColorTransform ) : void		{			_colorTransform = vColorTransform;		}/* Constructor .....................................................................................*/		/**		 * Constructs a new BitMapFill fill.		 * @param vBitMapData			A transparent or opaque bitmap image that contains the bits to be displayed.			 * @param vSource				The display object or BitmapData object to draw to the BitmapData object. (The DisplayObject and BitmapData classes implement the IBitmapDrawable interface.)		 * @param vRepeat				If <code>true</code>, the bitmap image repeats in a tiled pattern. If <code>false</code>, the bitmap image does not repeat, and the edges of the bitmap are used for any fill area that extends beyond the bitmap.		 * @param vSmooth				If <code>false</code>, upscaled bitmap images are rendered by using a nearest-neighbor algorithm and look pixelated. If <code>true</code>, upscaled bitmap images are rendered by using a bilinear algorithm. Rendering by using the nearest neighbor algorithm is usually faster.		 * @param vBlendMode			A string value, from the flash.display.BlendMode class, specifying the blend mode to be applied to the resulting bitmap.		 * @param vClipRect				A Rectangle object that defines the area of the source object to draw. If you do not supply this value, no clipping occurs and the entire source object is drawn.		 * @param vRotation				The rotation in degrees used by the Matrix for applying the fill.		 * @param vColorTransform		A ColorTransform object that you use to adjust the color values of the bitmap. If no object is supplied, the bitmap image's colors are not transformed.		 * 		 * @example The following code creates a Bitmap Fill. 	 	 * <listing version="3.0" >	 	 * var bf : BitMapFill = new BitMapFill( new BitmapData( _loader.width, _loader.height, true ), _loader, true, true, BlendMode.OVERLAY, null, 0, null );	 	 * </listing>		 */			public function BitMapFill( vBitMapData : BitmapData, vSource : IBitmapDrawable, vRepeat : Boolean = true, vSmooth : Boolean = true, vBlendMode : String = null, vClipRect : Rectangle = null, vRotation : Number = 0, vColorTransform : ColorTransform = null ) 		{			_bitMapData = vBitMapData;			_source = vSource;			_repeat = vRepeat;			_smooth = vSmooth;			_blendMode = vBlendMode;			_clipRect = vClipRect;			_rotation = vRotation;			_colorTransform = vColorTransform;		}		/* Public Methods ..................................................................................*/		/**		 * @return	The string equivalent of this class.		 */		public function toString() : String 		{			return "com.factorylabs.orange.core.display.graphics.fills.BitMapFill";		}				/**		 * @inheritDoc		 */		public function beginFill( gfx : Graphics, fgfx : IGraphic ) : void		{			_bitMapData.draw( _source, null, _colorTransform, _blendMode, _clipRect, _smooth );			var matrix : Matrix = new Matrix();			matrix.createGradientBox( fgfx.width, fgfx.height, degreesToRadians( _rotation ), fgfx.x, fgfx.y );			gfx.beginBitmapFill( _bitMapData, matrix, _repeat, _smooth );		}				/**		 * @inheritDoc		 */		public function endFill( gfx : Graphics ) : void		{			gfx.endFill();		}				/**		 *	Convert a number from Degrees to Radians.		 *	@param	d		degrees (45°, 90°)		 *	@return 		radians (3.14..., 1.57...)		 * 	@use			{@code var vRadians:Number = MathUtil.degreesToRadians( 180 );}		 */		private function degreesToRadians( d:Number ):Number 		{			return d * ( Math.PI / 180 );		}	}}