package com.factorylabs.orange.core.display.graphics {	import flash.display.Graphics;		import com.factorylabs.orange.core.display.graphics.Graphic;	import com.factorylabs.orange.core.display.graphics.fills.IFill;		/**	 * Draws a wedge shape.	 * 	 * <p>Copyright 2008 by Factory Design Labs, All Rights Reserved.</p>	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a>	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jun 4, 2008	 */	public class FWedge		extends Graphic 	{/* Properties ......................................................................................*/				protected var _arc : Number;		protected var _direction : int;		protected var _startAngle : Number;				/**		 * Property for drawing a wedge left to right.		 */		public static const CLOCKWISE : int = -1;				/**		 * Property for drawing a wedge right to left.		 */		public static const COUNTER_CLOCKWISE : int = 1;		/* Getters/Setters .................................................................................*/						/**		 * @return	The arc of the wedge.		 */		public function get arc() : Number		{			return _arc;		}				public function set arc( vArc : Number ) : void		{			_arc = vArc;			if( _autoRedraw ) redraw();		}				/**		 * @return	The direction the wedge will draw itself.		 */		public function get direction() : int		{			return _direction;		}				public function set direction( vDirection : int ) : void		{			_direction = vDirection;			if( _autoRedraw ) redraw();		}				/**		 * @return	The angle to start drawing the wedge.		 */		public function get startAngle() : Number		{			return _startAngle;		}				public function set startAngle( vStartAngle : Number ) : void		{			_startAngle = vStartAngle;			if( _autoRedraw ) redraw();		}		/* Constructor .....................................................................................*/			/**		 * Constructs and draws a new wedge.		 * @param gfx			Reference to the <code>shape.graphics</code> where the shape will be drawn into.		 * @param xp			A number indicating the horizontal position relative to the registration point of the parent display object.		 * @param yp			A number indicating the vertical position relative to the registration point of the parent display object.		 * @param vSize			The width and height of the shape.			 * @param vArc			The sweep of the shape		 * @param vFill			Fill or line style to apply the shape.		 * @param vDirection	Whether to draw the wedge from left to right or right to left. Valid values are: <code>FWedge.CLOCKWISE</code>, <code>FWedge.COUNTER_CLOCKWISE</code>.		 * @param vStartAngle	The degree in which to start drawing the wedge shape.		 * @param vAutoRedraw	Determines if the graphic should auto redraw when a setter is called.		 * 		 * @example The following code creates a wedge shape.	 	 * <listing version="3.0" >	 	 * var sf : SolidFill = new SolidFill( 0x666666, .8 );	 	 * var w1 : FWedge = new FWedge( _gfx.graphics, 200, 150, 50, 180, sf, FWedge.CLOCKWISE, 0 );	 	 * </listing>		 */				public function FWedge( gfx : Graphics, xp : Number = 0, yp : Number = 0, vSize : Number = 10, vArc : Number = 180, vFill : IFill = null, vDirection : int = 1, vStartAngle : Number = 0, vAutoRedraw : Boolean = true )		{			super( gfx, xp, yp, vSize, vSize, vFill, false, vAutoRedraw );			_arc = vArc;			_direction = vDirection;			_startAngle = vStartAngle;			draw();		}/* Public Methods ..................................................................................*/				/**		 * @return	the string equivalent of this class.		 */				override public function toString() : String 		{			return "com.factorylabs.orange.core.display.graphics.FWedge";		}/* Protected Methods ...............................................................................*/				/**		 * Procedure for drawing the wedge shape.		 */		override protected function drawGraphic() : void		{			var ox : Number = _x;			var oy : Number = _y;						_gfx.moveTo( _x, _y );			if( Math.abs( _arc ) > 360) _arc = 360;			_arc *= _direction;						var segs : Number = Math.ceil( Math.abs( _arc ) / 45 );			var segAngle : Number = _arc / segs;			var theta : Number = -( ( segAngle ) * ( Math.PI / 180 ) );			var angle : Number = -( ( _startAngle ) * ( Math.PI / 180 ) );						var ax : Number = _x + Math.cos( ( _startAngle ) * ( Math.PI / 180 ) ) * _w;			var ay : Number = _y + Math.sin( -( _startAngle ) * ( Math.PI / 180 ) ) * _w;			_gfx.lineTo( ax, ay );						for( var i : int = 0; i < segs ; ++i )			{				angle += theta;				var angleMid : Number = angle - ( theta / 2 );				var bx : Number = _x + Math.cos( angle ) * _w;				var by : Number = _y + Math.sin( angle ) * _w;				var cx : Number = _x + Math.cos( angleMid ) * ( _w / Math.cos( theta / 2 ) );				var cy : Number = _y + Math.sin( angleMid ) * ( _w / Math.cos( theta / 2 ) );				_gfx.curveTo( cx, cy, bx, by );			}			_gfx.lineTo( ox, oy );		}	}}		