package tests.factorylabs.fluint.ui{	import tests.digitalprimates.fluint.monitor.TestCaseResult;	import tests.digitalprimates.fluint.monitor.TestMethodResult;	import tests.factorylabs.fluint.events.TestResultEvent;		import flash.utils.Dictionary;		/**	 * Displays results of a suite of tests via the console window. 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 28, 2009 	 */	public class TestConsoleDisplay		implements ITestDisplay	{		private static const DIVIDER	:String = '----------------------------------------\n';		private var _showXML			:Boolean;				/**		 * @return	Whether to output the xml or not.		 */		public function get showXML() :Boolean { return _showXML; }		public function set showXML( v_showXML :Boolean ) :void		{			_showXML = v_showXML;		}			/**		 * Initialize a console display for reporting TestSuite results.		 * @param v_showXML Whether to output the xml or not.			 */		public function TestConsoleDisplay( v_showXML :Boolean = false )		{			_showXML = v_showXML;			initialize();		}				public function toString() :String 		{			return "tests.factorylabs.fluint.ui.TestConsoleDisplay";		}				/**		 * @inheritDoc		 */		public function dispose() :void		{		}				protected function initialize() :void		{			trace( '\nRunning Tests..' );		}		/**		 * @inheritDoc		 */		public function updateTestCaseResult( e :TestResultEvent ) :void		{			var result :TestCaseResult = TestCaseResult( e.result );			trace( '\n' + result.qualifiedClassName );		}				/**		 * Updates the console window with resulting test methods as they are run.		 * @inheritDoc		 */		public function updateTestMethodResult( e :TestResultEvent ) :void		{			var result	:TestMethodResult = TestMethodResult( e.result );			var icon	:String = ( result.status ) ? 'âˆš' : 'x';			trace( '    ' + icon + '  ' + result.displayName );	//  + ' :: ' + result.metadata		}		/**		 * Prints any information output in the xml, post test run.		 * @inheritDoc		 */		public function updateTestsComplete( xml :XML ) :void		{			var result :String = '\n..Tests Complete\n\n'; 			result += DIVIDER;			result += printErrors( xml );			result += printSummary( xml );			result += '\n' + DIVIDER + '\n';			trace( result );			if( _showXML )				trace( xml );		}				/**		 * @param xml	the original stored ArrayColleciton converted to xml.		 * @return		A preformated listing of information related to any errors or failures. 		 */				private function printErrors( xml :XML ) :String		{			var problems :Array = checkForErrors( xml.* );			if( problems.length > 0 )			{				var result :String = 'ERRORS:\n';				for each ( var dict :Dictionary in problems )				{					var klass	:String = 'Class: ' + dict[ 'class' ] + '\n';					var name	:String = 'Method: ' + dict[ 'name' ] + '\n';					var type	:String = 'Type: ' + dict[ 'type' ] + '\n';					var report	:String = 'Stack Report: ' + dict[ 'report' ] + '\n\n';					result += klass + name + type + report;				}				return result + DIVIDER;			}			else			{				return "";			}		}				/**		 * @param list The XMLList to search for errors.		 * @return	Dictionary of errors or failures from the tests.		 */		private function checkForErrors( list :XMLList ) :Array		{			var problems :Array = [];			for each( var testcase :XML in list )			{				for each( var tests :XML in testcase.* )				{					if( tests.*.length() > 0 )						problems.push( getErrorDetails( tests ) );				}			}						return problems;		}				/**		 * @param tests	The node where the error occurred.		 * @return	A dictionary description of the error.		 */		private function getErrorDetails( tests :XML ) :Dictionary		{			var klass	:String = tests.@className;			var name	:String = tests.@name;			var type	:String = tests.*.@type;			var report	:String = tests.*.text();						var dictionary :Dictionary = new Dictionary();			dictionary[ 'class' ] = klass;			dictionary[ 'name' ] = name;			dictionary[ 'type' ] = type;			dictionary[ 'report' ] = report;			return dictionary;		}				/**		 * @param xml	the original stored ArrayColleciton converted to xml.		 * @return	A brief summary about the completed TestSuite. 		 */		private function printSummary( xml :XML ) :String		{			var header	:String = 'SUMMARY:\n';			var status	:String = ( xml.@status == 'true' ) ? 'All Tests Passed\n' : 'Tests Have Failed\n';			var count	:String = "Number of Tests = " + xml.@testCount + '\n';			var errors	:String = "Number of Errors = " + xml.@errorCount + '\n';			var fails	:String = "Number of Failures = " + xml.@failureCount + '\n';			return header + status + count + errors + fails;		}	}}