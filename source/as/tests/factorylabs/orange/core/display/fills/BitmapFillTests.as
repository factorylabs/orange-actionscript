package tests.factorylabs.orange.core.display.fills{	import flash.geom.ColorTransform;
	import flash.geom.Rectangle;
	import tests.factorylabs.orange.helpers.MockCanvas;	import com.factorylabs.orange.core.display.fills.BitmapFill;	import org.hamcrest.assertThat;	import org.hamcrest.object.equalTo;	import flash.display.BitmapData;	import flash.display.BlendMode;	import flash.display.Shape;	/**	 * Generate the test cases for the BitmapFills class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2010 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jan 11, 2010	 */	public class BitmapFillTests 	{		private var _canvas		:MockCanvas;		private var _shape 		:Shape;		private var _bfill 		:BitmapFill;				[BeforeClass]		public static function runBeforeClass() :void		{					}				[AfterClass]		public static function runAfterClass() :void		{					}				[Before]		public function runBeforeEachTest() :void		{			var bmd :BitmapData = new BitmapData( 100, 100, true, 0xFFFFFFFF );			_canvas = new MockCanvas();			_shape = new Shape();			_bfill = new BitmapFill( bmd, _shape, true, true, BlendMode.OVERLAY, null, 0, null );		}				[After]		public function runAfterEachTest() :void		{			_bfill = null;		}				[Test]		public function constructor() :void		{			var bmd :BitmapData = new BitmapData( 100, 100, true, 0xFFFFFFFF );			assertThat( _bfill.bitmapData.width, equalTo( bmd.width ) );			assertThat( _bfill.source, equalTo( _bfill.source ) );			assertThat( _bfill.repeat, equalTo( true ) );			assertThat( _bfill.smooth, equalTo( true ) );			assertThat( _bfill.blendMode, equalTo( BlendMode.OVERLAY ) );			assertThat( _bfill.clipRect, equalTo( null ) );			assertThat( _bfill.rotation, equalTo( 0 ) );			assertThat( _bfill.colorTransform, equalTo( null ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function bitmapData() :void		{			var bmd :BitmapData = new BitmapData( 100, 100, true, 0x00000000 );			_bfill.bitmapData = bmd;			assertThat( _bfill.bitmapData.width, equalTo( bmd.width ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function source() :void		{			_bfill.source = _canvas;			assertThat( _bfill.source, equalTo( _canvas ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function repeat() :void		{			_bfill.repeat = false;			assertThat( _bfill.repeat, equalTo( false ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function smooth() :void		{			_bfill.smooth = false;			assertThat( _bfill.smooth, equalTo( false ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function blendMode() :void		{			_bfill.blendMode = BlendMode.HARDLIGHT;			assertThat( _bfill.blendMode, equalTo( BlendMode.HARDLIGHT ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function clipRect() :void		{			_bfill.clipRect = new Rectangle( 0, 0, 100, 100 );			assertThat( _bfill.clipRect.width, equalTo( 100 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function rotation() :void		{			_bfill.rotation = 180;			assertThat( _bfill.rotation, equalTo( 180 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function colorTransform() :void		{			_bfill.colorTransform = null;			assertThat( _bfill.colorTransform, equalTo( null ) );		}	}}