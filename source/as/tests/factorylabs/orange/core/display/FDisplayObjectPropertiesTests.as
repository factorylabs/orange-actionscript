package tests.factorylabs.orange.core.display{	import com.factorylabs.orange.core.display.FDisplayObjectProperties;	import com.factorylabs.orange.core.display.FSprite;	import org.hamcrest.assertThat;	import org.hamcrest.object.equalTo;	import org.hamcrest.object.notNullValue;	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * Generate the test cases for the FDisplayObjectExtended class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2009 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Nov 29, 2009	 */	public class FDisplayObjectPropertiesTests 	{		private var _sprite			:Sprite;		private var _fmock			:FDisplayObjectProperties;				[BeforeClass]		public static function runBeforeClass() :void		{					}				[AfterClass]		public static function runAfterClass() :void		{					}				[Before(ui)]		public function runBeforeEachTest() :void		{			_sprite = new Sprite();			var fsprite :FSprite = new FSprite( _sprite, { x: 0, y: 0 } );			_fmock = new FDisplayObjectProperties( fsprite );		}				[After(ui)]		public function runAfterEachTest() :void		{			_sprite.removeChild( FSprite( _fmock.displayObject ) );			_fmock = null;			_sprite = null;		}				[Test]		public function constructor() :void		{			assertThat( _sprite.contains( FSprite( _fmock.displayObject ) ), equalTo( true ) );			assertThat( _fmock, notNullValue() );			assertThat( _fmock.bounds.x, equalTo( 0 ) );			assertThat( _fmock.bounds.y, equalTo( 0 ) );			assertThat( _fmock.bounds.width, equalTo( 0 ) );			assertThat( _fmock.bounds.height, equalTo( 0 ) );			assertThat( _fmock.offset.x, equalTo( 0 ) );			assertThat( _fmock.offset.y, equalTo( 0 ) );		}		[Test]		public function displayObject() :void		{			assertThat( _fmock.displayObject, notNullValue() );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function bounds() :void		{			assertThat( _fmock.bounds, notNullValue() );			_fmock.bounds = new Rectangle( 10, 10, 10, 10 );			var xv :Number = _fmock.bounds.x;			var yv :Number = _fmock.bounds.y;			var wv :Number = _fmock.bounds.width;			var hv :Number = _fmock.bounds.height;			assertThat( xv, equalTo( 10 ) );			assertThat( yv, equalTo( 10 ) );			assertThat( wv, equalTo( 10 ) );			assertThat( hv, equalTo( 10 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function offset() :void		{			assertThat( _fmock.offset, notNullValue() );			_fmock.offset = new Point( 10, 10 );			var xv :Number = _fmock.offset.x;			var yv :Number = _fmock.offset.y;	 			assertThat( xv, equalTo( 10 ) );			assertThat( yv, equalTo( 10 ) );		}		[Test(description='Checks both the getter and setter.', tracker_id='')]		public function x() :void		{			assertThat( _fmock.x, equalTo( 0 ) );			_fmock.offset = new Point( 10, 10 );			assertThat( _fmock.x, equalTo( 10 ) );			_fmock.x = 10;			assertThat( _fmock.x, equalTo( 20 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function y() :void		{			assertThat( _fmock.y, equalTo( 0 ) );			_fmock.offset = new Point( 10, 10 );			assertThat( _fmock.y, equalTo( 10 ) );			_fmock.y = 10;			assertThat( _fmock.y, equalTo( 20 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function width() :void		{			assertThat( _fmock.width, equalTo( 0 ) );			_fmock.width = 20;			assertThat( _fmock.width, equalTo( 20 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function coordinates() :void		{			assertThat( _fmock.x, equalTo( 0 ) );			assertThat( _fmock.y, equalTo( 0 ) );			_fmock.coordinates = new Point( 10, 10 );			assertThat( _fmock.coordinates.x, equalTo( 10 ) );			assertThat( _fmock.coordinates.y, equalTo( 10 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function left() :void		{			assertThat( _fmock.x, equalTo( 0 ) );			_fmock.offset = new Point( 10, 10 );			assertThat( _fmock.x, equalTo( 10 ) );			_fmock.x = 10;			assertThat( _fmock.left, equalTo( 20 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function right() :void		{			assertThat( _fmock.x, equalTo( 0 ) );			_fmock.offset = new Point( 10, 10 );			_fmock.x = 10;			_fmock.width = 20;			assertThat( _fmock.right, equalTo( 40 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function top() :void		{			assertThat( _fmock.y, equalTo( 0 ) );			_fmock.offset = new Point( 10, 10 );			assertThat( _fmock.y, equalTo( 10 ) );			_fmock.y = 10;			assertThat( _fmock.top, equalTo( 20 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function bottom() :void		{			assertThat( _fmock.y, equalTo( 0 ) );			_fmock.offset = new Point( 10, 10 );			_fmock.y = 10;			_fmock.height = 20;			assertThat( _fmock.bottom, equalTo( 40 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function horizontalCenter() :void		{			_fmock.x = 10;			_fmock.offset = new Point( 10, 0 );			_fmock.width = 40;			assertThat( _fmock.horizontalCenter, equalTo( 10 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function verticalCenter() :void		{			_fmock.y = 10;			_fmock.offset = new Point( 0, 10 );			_fmock.height = 40;			assertThat( _fmock.verticalCenter, equalTo( 10 ) );		}				[Test(description='This is a read only property.', tracker_id='')]		public function center() :void		{			_fmock.x = 10;			_fmock.y = 10;			_fmock.offset = new Point( 10, 10 );			_fmock.width = 40;			_fmock.height = 40;			assertThat( _fmock.center.x, equalTo( 10 ) );			assertThat( _fmock.center.y, equalTo( 10 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function globalX() :void		{			_fmock.x = 20;			_fmock.offset = new Point( 20, 0 );			_fmock.globalX = 20;			assertThat( _fmock.globalX, equalTo( 40 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function globalY() :void		{			_fmock.y = 20;			_fmock.offset = new Point( 0, 20 );			_fmock.globalY = 20;			assertThat( _fmock.globalY, equalTo( 40 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function globalCoordinates() :void		{			_fmock.x = 20;			_fmock.y = 20;			_fmock.offset = new Point( 20, 20 );			_fmock.globalCoordinates = new Point( 20, 20 );			assertThat( _fmock.globalCoordinates.x, equalTo( 40 ) );			assertThat( _fmock.globalCoordinates.y, equalTo( 40 ) );		}	}}