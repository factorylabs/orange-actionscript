package tests.factorylabs.orange.core.display.graphics{	import tests.factorylabs.orange.helpers.MockCanvas;	import com.factorylabs.orange.core.display.fills.SolidStroke;	import com.factorylabs.orange.core.display.graphics.FDashedLine;	import org.hamcrest.assertThat;	import org.hamcrest.object.equalTo;	import flash.display.CapsStyle;	import flash.display.JointStyle;	import flash.display.LineScaleMode;	import flash.display.Shape;	/**	 * Generate the test cases for the FDashedLine class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2010 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Jan 11, 2010	 */	public class FDashedLineTests 	{		private var _canvas		:MockCanvas;		private var _shape 		:Shape;		private var _fline 		:FDashedLine;		private var _magenta	:SolidStroke;				[BeforeClass]		public static function runBeforeClass() :void		{					}				[AfterClass]		public static function runAfterClass() :void		{					}				[Before]		public function runBeforeEachTest() :void		{			_canvas = new MockCanvas();			_shape = new Shape();			_magenta = new SolidStroke( 0xff00ff, 1, 3, true, LineScaleMode.NORMAL, CapsStyle.NONE, JointStyle.MITER, 3 );			_fline = new FDashedLine( _shape.graphics, 0, 0, 500, 0, 5, 5, _magenta, true );			_canvas.add( _shape );		}				[After]		public function runAfterEachTest() :void		{			_shape.graphics.clear();			_canvas.remove( _shape );			_magenta = null;			_fline = null;		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function gfx() :void		{			assertThat( _fline.gfx, equalTo( _shape.graphics ) );			var tmpshape :Shape = new Shape();			_fline.gfx = tmpshape.graphics;			assertThat( _fline.gfx, equalTo( tmpshape.graphics ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function x() :void		{			assertThat( _fline.x, equalTo( 0 ) );			_fline.x = 100;			assertThat( _fline.x, equalTo( 100 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function y() :void		{			assertThat( _fline.y, equalTo( 0 ) );			_fline.y = 100;			assertThat( _fline.y, equalTo( 100 ) );		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function endX() :void		{			assertThat( _fline.endX, equalTo( 500 ) );			_fline.endX = 100;			assertThat( _fline.endX, equalTo( 100 ) );		}				[Test(expects='ArgumentError')]		public function setWidth() :void		{			_fline.width = 100;		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function endY() :void		{			assertThat( _fline.endY, equalTo( 0 ) );			_fline.endY = 10;			assertThat( _fline.endY, equalTo( 10 ) );		}				[Test(expects='ArgumentError')]		public function setHeight() :void		{			_fline.height = 100;		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function fill() :void		{			assertThat( _fline.fill, equalTo( _magenta ) );			var sf :SolidStroke = new SolidStroke( 0x000000, .4 );			_fline.fill = sf;			assertThat( _fline.fill, equalTo( sf ) );		}				[Test(expects='ArgumentError')]		public function setCenter() :void		{			_fline.center = true;		}				[Test(description='Checks both the getter and setter.', tracker_id='')]		public function autoRedraw() :void		{			assertThat( _fline.autoRedraw, equalTo( true ) );			_fline.autoRedraw = false;		}				[Test]		public function redraw() :void		{			_fline.autoRedraw = false;			_fline.endX = 100;			assertThat( _shape.width, equalTo( 495 ) );		// offset because of segments and gap length			_fline.redraw();			assertThat( _shape.width, equalTo( 95 ) );		// offset because of segments and gap length		}	}}