package tests.factorylabs.orange.core.utils{	import asunit.asserts.assertEqualsArraysIgnoringOrder;
	import asunit.asserts.assertNotNull;
	import asunit.asserts.assertTrue;
	import asunit.asserts.assertEquals;
	import asunit.asserts.assertFalse;	import com.factorylabs.orange.core.utils.ArrayMethods;	/**	 * Generate the test cases for the ArrayMethods class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2010 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: March 16, 2008	 */	public class ArrayMethodsTests 	{		private var _array		:Array;		private var _first		:int;		private var _end		:int;		private var _middle		:int;				[Before]		public function runBeforeEachTest() :void		{			_array = [ 0, 1, 2, 3, 4, 5, 6 ];			_first = 0;			_end = _array.length - 1;			_middle = Math.round( _end * .5 );		}				[After]		public function runAfterEachTest() :void		{			_array = null;			_first = NaN;			_end = NaN;			_middle = NaN;		}		[Test]		public function clone() :void		{			assertFalse( ArrayMethods.clone( _array ) == _array );			assertEquals( ArrayMethods.clone( _array )[ _first ], _array[ _first ] );			assertEquals( ArrayMethods.clone( _array )[ _middle ], _array[ _middle ] );			assertEquals( ArrayMethods.clone( _array )[ _end ], _array[ _end ] );		}				[Test]		public function contains() :void		{			assertEquals( ArrayMethods.contains( _array, 1 ), true );			assertEquals( ArrayMethods.contains( _array, 666 ), false );		}				[Test]		public function loop() :void		{			assertEquals( ArrayMethods.loop( _array, _end + 1 ), 0 );			assertEquals( ArrayMethods.loop( _array, _middle ), _middle );			assertEquals( ArrayMethods.loop( _array, -1 ), _end );		}				[Test]		public function random() :void		{			var random :int = int( ArrayMethods.random( _array ) );			assertTrue( hasItem(_array, random) );			assertNotNull( random );		}				[Test]		public function remove() :void		{			var clone :Array = ArrayMethods.clone( _array );			ArrayMethods.remove( clone, 5 );			assertEquals( clone == _array, false );			assertEquals( ArrayMethods.contains( clone, 5 ), false );		}				[Test]		public function search() :void		{			assertEquals( ArrayMethods.search( _array, 0 ), _first );			assertEquals( ArrayMethods.search( _array, 3 ), _middle );			assertEquals( ArrayMethods.search( _array, 6 ), _end );		}				[Test]		public function shuffle() :void		{			var clone :Array = ArrayMethods.clone( _array );			assertTrue( hasItem( _array, clone[ _end ] ) );			assertEqualsArraysIgnoringOrder( _array, ArrayMethods.shuffle( clone, false ) );			assertFalse( ArrayMethods.shuffle( clone, true ) == _array );		}		protected function hasItem( $array :Array, $item :int  ) :Boolean		{			var len :int = $array.length;			for( var i :int = 0; i < len; ++i )			{				if( $array[ i ] == $item )					return true;			}			return false;		}	}}