package tests.factorylabs.orange.core.utils{	import com.factorylabs.orange.core.utils.StringMethods;	import org.hamcrest.assertThat;	import org.hamcrest.object.equalTo;	/**	 * Generate the test cases for the StringMethods class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2010 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Mar 16, 2009	 */	public class StringMethodsTests 	{		private var _wanker :String;		private var _urlstr	:String;				[BeforeClass]		public static function runBeforeClass() :void		{					}				[AfterClass]		public static function runAfterClass() :void		{					}				[Before]		public function runBeforeEachTest() :void		{			_wanker = 'gabe is a _wanker'; 			_urlstr = 'http://factorylabs.com/'; 		}				[After]		public function runAfterEachTest() :void		{					}				[Test]		public function afterFirst() :void		{			assertThat( StringMethods.afterFirst( _wanker, '_' ), equalTo( 'wanker' ) );			assertThat( StringMethods.afterFirst( _wanker, ' ' ), equalTo( 'is a _wanker' ) );		}				[Test]		public function afterLast() :void		{			assertThat( StringMethods.afterLast( _urlstr, '.' ), equalTo( 'com/' ) );			assertThat( StringMethods.afterLast( _wanker, ' ' ), equalTo( '_wanker' ) );		}				[Test]		public function beginsWith() :void		{			assertThat( StringMethods.beginsWith( 'XAAA', 'X' ), equalTo( true ) );			assertThat( StringMethods.beginsWith( 'XXAAA', 'XX' ), equalTo( true ) );			assertThat( StringMethods.beginsWith( 'XXXAAA', 'XX' ), equalTo( true ) );			assertThat( StringMethods.beginsWith( 'XX', '0' ), equalTo( false ) );		}				[Test]		public function beforeFirst() :void		{			assertThat( StringMethods.beforeFirst( _wanker, ' ' ), equalTo( 'gabe' ) );			assertThat( StringMethods.beforeFirst( _wanker, '_' ), equalTo( 'gabe is a ' ) );			assertThat( StringMethods.beforeFirst( _urlstr, '' ), equalTo( '' ) );		}				[Test]		public function beforeLast() :void		{			assertThat( StringMethods.beforeLast( _wanker, '_' ), equalTo( 'gabe is a ' ) );			assertThat( StringMethods.beforeLast( _urlstr, '.' ), equalTo( 'http://factorylabs' ) );		}				[Test]		public function between() :void		{			assertThat( StringMethods.between( _urlstr, '//', '.' ), equalTo( 'factorylabs' ) );			assertThat( StringMethods.between( _urlstr, 'h', 'p' ), equalTo( 'tt' ) );		}				[Test]		public function block() :void		{			assertThat( StringMethods.block( 'Mansfield smells', 10, ' ' ).length, equalTo( 3 ) );		}				[Test]		public function capitalize() :void		{			assertThat( StringMethods.capitalize( _wanker ), equalTo( 'Gabe is a _wanker' ) );		}				[Test]		public function contains() :void		{			assertThat( StringMethods.contains( _wanker, 'g' ), equalTo( true ) );			assertThat( StringMethods.contains( _wanker, 'gabe' ), equalTo( true ) );			assertThat( StringMethods.contains( _wanker, '3' ), equalTo( false ) );		}				[Test]		public function countOf() :void		{			assertThat( StringMethods.countOf( _urlstr, '/' ) == 3, equalTo( true ) );			assertThat( StringMethods.countOf( _urlstr, 'M' ) == 0, equalTo( true ) );			assertThat( StringMethods.countOf( _urlstr, 'm' ) == 1, equalTo( true ) );		}				[Test]		public function editDistance() :void		{			var str1 :String = '123';			var str2 :String = '132';			assertThat( StringMethods.editDistance( str1, str2 ), equalTo( 2 ) );		}				[Test]		public function endsWith() :void		{			assertThat( StringMethods.endsWith( _urlstr, '/' ) );			assertThat( StringMethods.endsWith( _urlstr, 'com/' ) );		}				[Test]		public function hasText() :void		{			assertThat( StringMethods.hasText( _urlstr ), equalTo( true ) );			assertThat( StringMethods.hasText( '  ' ), equalTo( false ) );		}				[Test]		public function isEmpty() :void		{			assertThat( StringMethods.isEmpty( _urlstr ), equalTo( false ) );			assertThat( StringMethods.isEmpty( '' ), equalTo( true ) );		}				[Test]		public function isNumeric() :void		{			assertThat( StringMethods.isNumeric( '123' ), equalTo( true ) );			assertThat( StringMethods.isNumeric( _urlstr ), equalTo( false ) );			assertThat( StringMethods.isNumeric( '  ' ), equalTo( false ) );		}				[Ignore('This is not working as expected.')]		[Test]		public function padLeft() :void		{			assertThat( StringMethods.padLeft( 'abc', '-', 2 ), equalTo( '--abc' ) );		}				[Ignore('This is not working as expected.')]		[Test]		public function padRight() :void		{			assertThat( StringMethods.padLeft( 'abc', '-', 2 ), equalTo( 'abc--' ) );		}				[Test]		public function properCase() :void		{			assertThat( StringMethods.properCase( _wanker), equalTo( 'Gabe is a _wanker' ) );		}				[Test]		public function quote() :void		{			assertThat( StringMethods.quote( 'dog\'s' ), equalTo( '"dog\'s"' ) );		}				[Test]		public function remove() :void		{			assertThat( StringMethods.remove( 'suck_er', '_', false ), equalTo( 'sucker' ) );			assertThat( StringMethods.remove( 'suCk_ecr', 'C', true ), equalTo( 'suk_ecr' ) );		}				[Test]		public function removeExtraWhitespace() :void		{			assertThat( StringMethods.removeExtraWhitespace( '\t\rsucker\n  ' ), equalTo( 'sucker' ) );		}				[Test]		public function reverse() :void		{			assertThat( StringMethods.reverse( 'bargains' ), equalTo( 'sniagrab' ) );			assertThat( StringMethods.reverse( 'get bargains' ), equalTo( 'sniagrab teg' ) );		}				[Test]		public function reverseWords() :void		{			assertThat( StringMethods.reverseWords( 'shred the gnar' ), equalTo( 'gnar the shred' ) );		}				[Test]		public function similarity() :void		{			assertThat( StringMethods.similarity( '1234', '1235' ), equalTo( 75 ) );		}				[Test]		public function stripTags() :void		{			assertThat( StringMethods.stripTags( '<b>bold</b>' ), equalTo( 'bold' ) );			assertThat( StringMethods.stripTags( '<a href="http://www.factorylabs.com/">link</a>' ), equalTo( 'link' ) );		}				[Test]		public function swapCase() :void		{			assertThat( StringMethods.swapCase( 'Fugly' ), equalTo( 'fugly' ) );		}				[Test]		public function trim() :void		{			assertThat( StringMethods.trim( '\t\n\rmansfield\t\n\r' ), equalTo( 'mansfield' ) );			assertThat( StringMethods.trim( '   mansfield   ' ), equalTo( 'mansfield' ) );		}				[Test]		public function trimLeft() :void		{			assertThat( StringMethods.trimLeft( '\t\n\rmansfield' ), equalTo( 'mansfield' ) );			assertThat( StringMethods.trimLeft( '   mansfield' ), equalTo( 'mansfield' ) );			assertThat( StringMethods.trimLeft( '   mansfield  ' ), equalTo( 'mansfield  ' ) );		}				[Test]		public function trimRight() :void		{			assertThat( StringMethods.trimRight( 'mansfield\t\n\r' ), equalTo( 'mansfield' ) );			assertThat( StringMethods.trimRight( 'mansfield   ' ), equalTo( 'mansfield' ) );			assertThat( StringMethods.trimRight( '   mansfield  ' ), equalTo( '   mansfield' ) );		}				[Test]		public function wordCount() :void		{			assertThat( StringMethods.wordCount( _wanker ), equalTo( 4 ) );		}				[Ignore('This is not truncating properly.')]		[Test]		public function truncate() :void		{			assertThat( StringMethods.truncate( 'mansfield', 3, '...' ), equalTo( 'man...' ) );		}				[Test]		public function formatNumber() :void		{			assertThat( StringMethods.formatNumber( 10256.434 ), equalTo( '10,256' ) );		}	}}