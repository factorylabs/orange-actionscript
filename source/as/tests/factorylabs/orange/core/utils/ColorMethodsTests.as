package tests.factorylabs.orange.core.utils{	import org.hamcrest.object.equalTo;	import com.factorylabs.orange.core.utils.ColorMethods;	import org.hamcrest.assertThat;		/** 	 * Generate the test cases for the ColorMethods class. 	 * 	 * <hr /> 	 * <p>Copyright 2004-2009 by <a href="http://www.factorylabs.com/">Factory Design Labs</a></p> 	 * 	 * Permission is hereby granted, free of charge, to any person obtaining 	 * a copy of this software and associated documentation files (the	 * "Software"), to deal in the Software without restriction, including	 * without limitation the rights to use, copy, modify, merge, publish,	 * distribute, sublicense, and/or sell copies of the Software, and to	 * permit persons to whom the Software is furnished to do so, subject to	 * the following conditions:<br /><br />	 *	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.<br /><br />	 *	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 *	 * @author		Matthew Kitt	 * @version		1.0.0 :: Mar 15, 2009	 */	public class ColorMethodsTests 	{			[BeforeClass]		public static function runBeforeClass() :void		{					}				[AfterClass]		public static function runAfterClass() :void		{					}				[Before]		public function runBeforeEachTest() :void		{					}				[After]		public function runAfterEachTest() :void		{					}				[Test]		public function argbToHex() :void		{			assertThat( ColorMethods.argbToHex( 0, 255, 255, 255 ) == 0x00ffffff, equalTo( true ) );			assertThat( ColorMethods.argbToHex( 255, 255, 255, 255 ) == 0x00ffffff, equalTo( false ) );		}				[Test]		public function hexToFlashColorNumber() :void		{			assertThat( ColorMethods.hexToFlashColorNumber( '0xff00ff' ), equalTo( 0xff00ff ) );			assertThat( ColorMethods.hexToFlashColorNumber( '#ff00ff' ) == 0xff00ff, equalTo( false ) );		}				[Test]		public function hexToARGB() :void		{			var color1 :Object = { a: 0, r: 255, g: 255, b: 255 };			var color2	:Object = ColorMethods.hexToARGB( 0x00ffffff );						assertThat( color1[ 'a' ] == color2[ 'a' ], equalTo( true ) );			assertThat( color1[ 'r' ] == color2[ 'r' ], equalTo( true ) );			assertThat( color1[ 'g' ] == color2[ 'g' ], equalTo( true ) );			assertThat( color1[ 'b' ] == color2[ 'g' ], equalTo( true ) );		}				[Test]		public function hexToRGB() :void		{			var color1 :Object = { r: 255, g: 255, b: 255 };			var color2	:Object = ColorMethods.hexToRGB( 0xffffff );						assertThat( color1[ 'r' ] == color2[ 'r' ], equalTo( true ) );			assertThat( color1[ 'g' ] == color2[ 'g' ], equalTo( true ) );			assertThat( color1[ 'b' ] == color2[ 'g' ], equalTo( true ) );		}				[Test]		public function flashColorNumberToHexString() :void		{			assertThat( ColorMethods.flashColorNumberToHexString( 0xff00ff ) == '0xff00ff', equalTo( true ) );		}				[Test]		public function rgbToHex() :void		{			assertThat( ColorMethods.rgbToHex( 255, 255, 255 ) == 0xffffff, equalTo( true ) );			assertThat( ColorMethods.rgbToHex( 0, 0, 0 ) == 0x000000, equalTo( true ) );			assertThat( ColorMethods.rgbToHex( 0, 0, 0 ) == 0xff00ff, equalTo( false ) );		}	}}