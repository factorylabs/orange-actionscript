package tests.factorylabs.orange.core.gc{	import tests.factorylabs.helpers.MockBaseClass;			import com.factorylabs.orange.core.gc.JanitorManager;		import com.factorylabs.orange.core.gc.Janitor;			import tests.digitalprimates.fluint.tests.TestCase;		/** 	 * Test methods for the JanitorManager test case. 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: May 28, 2009 	 */	public class JanitorManagerTest		extends TestCase	{		private var _manager	:JanitorManager;				public function JanitorManagerTest()		{			super();		}				override public function toString() :String 		{			return "tests.factorylabs.core.gc.JanitorManagerTest";		}				override protected function setUp() :void		{			_manager = JanitorManager.instance;		}				[Test(description="Use a Janitor object as a Proxy for testing the add functionality, since this is the normal behavior.", tracker_id="")]		public function test_addJanitor() :void		{			var janitor :Janitor = new Janitor( this );			assertTrue( _manager.janitorMap.hasKey( janitor ) );			janitor.cleanUp();		}				[Test(description="Use a Janitor object as a Proxy for testing the remove functionality, since this is the normal behavior.", tracker_id="")]		public function test_removeJanitor() :void		{			var janitor :Janitor = new Janitor( this );			janitor.cleanUp();			assertFalse( _manager.janitorMap.hasKey( janitor ) );		}				public function test_cleanUp() :void		{			var janitor1	:Janitor = new Janitor( this );			var janitor2	:Janitor = new Janitor( new MockBaseClass() );			assertTrue( _manager.janitorMap.hasKey( janitor1 ) );			assertTrue( _manager.janitorMap.hasKey( janitor2 ) );			_manager.cleanUp();			assertFalse( _manager.janitorMap.hasKey( janitor1 ) );			assertFalse( _manager.janitorMap.hasKey( janitor2 ) );			janitor1.cleanUp();			janitor2.cleanUp();		}	}}