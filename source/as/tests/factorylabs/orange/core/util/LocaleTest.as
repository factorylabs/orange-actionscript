package tests.factorylabs.orange.core.util{	import asunit.framework.TestCase;	import com.factorylabs.orange.core.util.Locale;	import flash.system.Capabilities;	/** 	 * Test methods for the Locale test case. 	 *  	 * <p>Copyright 2004-2009 by Factory Design Labs</p>     *      * Permission is hereby granted, free of charge, to any person obtaining     * a copy of this software and associated documentation files (the     * "Software"), to deal in the Software without restriction, including     * without limitation the rights to use, copy, modify, merge, publish,     * distribute, sublicense, and/or sell copies of the Software, and to     * permit persons to whom the Software is furnished to do so, subject to     * the following conditions:     *      * The above copyright notice and this permission notice shall be     * included in all copies or substantial portions of the Software.     *      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE     * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION     * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION     * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 16, 2009 	 */	public class LocaleTest		extends TestCase	{				private var _locale		:Locale;				public function LocaleTest()		{			super();			_locale = new Locale( Locale.ENGLISH, Locale.US );		}				override public function toString() :String 		{			return "tests.factorylabs.orange.core.util.LocaleTest";		}						[Test(description="Tests instantiation, getter and setter.", tracker_id="")]		public function test_slanguage() :void		{			assertEquals( _locale.language, Locale.ENGLISH );			_locale.language = Locale.GERMAN;			assertEquals( _locale.language, Locale.GERMAN );			_locale.language = Locale.ENGLISH;			assertEquals( _locale.language, Locale.ENGLISH );		}		[Test(description="Tests instantiation, getter and setter.", tracker_id="")]		public function test_variant() :void		{			assertEquals( _locale.variant, Locale.US );			_locale.variant = Locale.UK;			assertEquals( _locale.variant, Locale.UK );			_locale.variant = Locale.US;			assertEquals( _locale.variant, Locale.US );		}				[Test(description="Tests instantiation, getter and setter.", tracker_id="")]		public function test_languageVariant() :void		{			assertEquals( _locale.languageVariant, Locale.ENGLISH + "-" + Locale.US );			_locale.languageVariant = Locale.FRENCH + "-" + Locale.UK;			assertEquals( _locale.languageVariant, Locale.FRENCH + "-" + Locale.UK );			_locale.languageVariant = Locale.ENGLISH + "-" + Locale.US;			assertEquals( _locale.languageVariant, Locale.ENGLISH + "-" + Locale.US );		}				[Test(description="Sets the locale back to its default Capabilites properties. This test will fail outside of the USA!", tracker_id="")]		public function test_reset() :void		{			_locale.reset();			assertEquals( Capabilities.language, _locale.language );			assertEquals( Locale.US, _locale.variant );		}			}}