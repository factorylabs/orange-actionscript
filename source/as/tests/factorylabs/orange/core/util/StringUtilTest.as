package tests.factorylabs.orange.core.util{	import tests.digitalprimates.fluint.tests.TestCase;		import com.factorylabs.orange.core.util.StringUtil;		/** 	 * Test methods for the StringUtil test case. 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 16, 2009 	 */	public class StringUtilTest		extends TestCase	{				private var _wanker :String = "gabe is a _wanker";		private var _urlstr	:String = "http://factorylabs.com/";		public function StringUtilTest()		{			super();		}				override public function toString() :String 		{			return "tests.factorylabs.core.util.StringUtilTest";		}				public function test_afterFirst() :void		{			assertEquals( "wanker", StringUtil.afterFirst( _wanker, "_" ) );			assertEquals( "is a _wanker", StringUtil.afterFirst( _wanker, " " ) );		}				public function test_afterLast() :void		{			assertEquals( "com/", StringUtil.afterLast( _urlstr, "." ) );			assertEquals( "_wanker", StringUtil.afterLast( _wanker, " " ) );		}				public function test_beginsWith() :void		{			assertTrue( StringUtil.beginsWith( "XAAA", "X" ) );			assertTrue( StringUtil.beginsWith( "XXAA", "XX" ) );			assertTrue( StringUtil.beginsWith( "XXXAA", "XX" ) );			assertTrue( StringUtil.beginsWith( "XXXAA", "XX" ) );			assertFalse( StringUtil.beginsWith( "XX", "0" ) );		}				public function test_beforeFirst() :void		{			assertEquals( "gabe", StringUtil.beforeFirst( _wanker, " " ) );			assertEquals( "gabe is a ", StringUtil.beforeFirst( _wanker, "_" ) );			assertEquals( "", StringUtil.beforeFirst( _urlstr, "" ) );		}				public function test_beforeLast() :void		{			assertEquals( "gabe is a ", StringUtil.beforeLast( _wanker, "_" ) );			assertEquals( "http://factorylabs", StringUtil.beforeLast( _urlstr, "." ) );		}				[Test(description="Needs more tests around it... not understanding it at the moment -MK", tracker_id="")]		public function test_block() :void		{			assertEquals( 3, StringUtil.block( "Mansfield smells", 10, " " ).length );		}				public function test_capitalize() :void		{				assertEquals( "Gabe is a _wanker", StringUtil.capitalize( _wanker ) );		}				public function test_contains() :void		{			assertTrue( StringUtil.contains( _wanker, "g") );			assertTrue( StringUtil.contains( _wanker, "gabe") );			assertFalse( StringUtil.contains( _wanker, "3") );		}				public function test_countOf() :void		{			assertEquals( 3, StringUtil.countOf( _urlstr, "/", false ));			assertEquals( 0, StringUtil.countOf( _urlstr, "M", true ));			assertEquals( 1, StringUtil.countOf( _urlstr, "m", true ));		}				[Test(description="Needs more tests around it.", tracker_id="")]		public function test_editDistance() :void		{			var str1 :String = "123";			var str2 :String = "132";						assertEquals( 2, StringUtil.editDistance( str1, str2 ) );		}				public function test_endsWith() :void		{			assertTrue( StringUtil.endsWith( _urlstr, "/" ) );			assertTrue( StringUtil.endsWith( _urlstr, "com/" ) );		}				public function test_hasText() :void		{			assertTrue( StringUtil.hasText( _urlstr ) );			assertFalse( StringUtil.hasText( "  " ) );		}				public function test_isEmpty() :void		{			assertTrue( StringUtil.hasText( _urlstr ) );			assertFalse( StringUtil.hasText( "  " ) );		}				public function test_isNumeric() :void		{			assertTrue( StringUtil.isNumeric( "123" ) );			assertFalse( StringUtil.isNumeric( _urlstr ) );			assertFalse( StringUtil.isNumeric( "  " ) );		}				[Test(description="Needs a test written", tracker_id="pivotal_id")]		public function test_padLeft() :void		{			// TODO: Write a test here.		}					[Test(description="Needs a test written", tracker_id="pivotal_id")]		public function test_padRight() :void		{			// TODO: Write a test here.		}				public function test_properCase() :void		{			assertEquals( "Gabe is a _wanker", StringUtil.properCase( _wanker ) );		}				public function test_quote() :void		{			assertEquals( "\"dog\'s\"", StringUtil.quote( "dog's" ) );		}				public function test_remove() :void		{			assertEquals( "sucker", StringUtil.remove( "suck_er", "_", false ) );			assertEquals( "suk_er", StringUtil.remove( "suCk_er", "C", true ) );		}				public function test_removeExtraWhitespace() :void		{			assertEquals( "sucker", StringUtil.removeExtraWhitespace( "\t\rsucker\n  " ) );		}				public function test_reverse() :void		{			assertEquals( "sniagrab", StringUtil.reverse( "bargains" ) );			assertEquals( "sniagrab teg", StringUtil.reverse( "get bargains" ) );		}				[Test(description="RegEx is failing here.", tracker_id="")]		public function test_reverseWords() :void		{//			TODO: revisit the test... it may actually be the StringUtil.//			assertEquals( "Shred the gnar", StringUtils.reverseWords( "gnar the Shred" ) );		}				public function test_similarity() :void		{			assertEquals( 75, StringUtil.similarity( "1234", "1235" ) );		}				public function test_stripTags() :void		{			assertEquals( "bold", StringUtil.stripTags( "<b>bold</b>" ) );		}				[Test(description="RegEx is failing here.", tracker_id="")]		public function test_swapCase() :void		{//			assertEquals( "Fugly Dudes", StringUtils.swapCase( "fugly dudes" ) );		}				public function test_trim() :void		{			assertEquals( "mansfield", StringUtil.trim( "\t\n\rmansfield\t\n\r" ) );			assertEquals( "mansfield", StringUtil.trim( "   mansfield   " ) );		}				public function test_trimLeft() :void		{			assertEquals( "mansfield", StringUtil.trim( "\t\n\rmansfield" ) );			assertEquals( "mansfield", StringUtil.trim( "   mansfield" ) );		}				public function test_trimRight() :void		{			assertEquals( "mansfield", StringUtil.trim( "mansfield\t\n\r" ) );			assertEquals( "mansfield", StringUtil.trim( "mansfield   " ) );		}				public function test_wordCount() :void		{			assertEquals( 4, StringUtil.wordCount( _wanker ) );		}				[Test(description="RegEx is failing here?", tracker_id="")]		public function test_truncate() :void		{//			assertEquals( "man...", StringUtils.truncate( "mansfield", 3 ) );		}	}}