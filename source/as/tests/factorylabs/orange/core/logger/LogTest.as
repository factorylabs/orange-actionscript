package tests.factorylabs.orange.core.logger{	import asunit.framework.TestCase;	import com.factorylabs.orange.core.gc.Janitor;	import com.factorylabs.orange.core.logger.Log;	import com.factorylabs.orange.core.logger.LogLevels;	import com.factorylabs.orange.core.logger.events.LogEvent;		/**	 * Test methods for the Log test case. 	 *  	 * <p>Copyright 2004-2009 by Factory Design Labs</p>     *      * Permission is hereby granted, free of charge, to any person obtaining     * a copy of this software and associated documentation files (the     * "Software"), to deal in the Software without restriction, including     * without limitation the rights to use, copy, modify, merge, publish,     * distribute, sublicense, and/or sell copies of the Software, and to     * permit persons to whom the Software is furnished to do so, subject to     * the following conditions:     *      * The above copyright notice and this permission notice shall be     * included in all copies or substantial portions of the Software.     *      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE     * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION     * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION     * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Apr 20, 2009 	 */	public class LogTest		extends TestCase	{				private var _logger :Log;		private var _janitor: Janitor;				public function LogTest()		{			super();			_janitor = new Janitor(null);			_logger = Log.getInstance();			Log.level = LogLevels.CORE;		}				override protected function setUp() :void 		{			_janitor.cleanUp();		}				override protected function tearDown() :void 		{			_janitor.cleanUp();		}				override public function toString() :String 		{			return "tests.factorylabs.orange.core.logger.LogTest";		}				public function test_level() :void		{			Log.level = LogLevels.INFO;			assertEquals( Log.level, LogLevels.INFO );						Log.level = LogLevels.CORE;         			assertEquals( Log.level, LogLevels.CORE );		}				public function test_appName() :void		{			Log.appName = "testing.log.appName";			assertEquals( Log.appName, "testing.log.appName" );			Log.appName = "NO APP NAME DEFINED";			assertEquals( Log.appName, "NO APP NAME DEFINED" );		}				public function test_isDev() :void		{			Log.isDev = false;			assertFalse( Log.isDev );			Log.isDev = true;			assertTrue( Log.isDev );		}				public function test_hasClearance() :void		{			Log.level = LogLevels.WARN;			assertTrue( _logger.hasClearance( LogLevels.LOG ) );			assertTrue( _logger.hasClearance( LogLevels.WARN ) );			assertFalse( _logger.hasClearance( LogLevels.CORE ) );			Log.level = LogLevels.CORE;		}		public function test_trace() :void		{			var msg :String = '[LogTest].test_trace()';			setupAsyncListener( msg );			Log.trace( msg );		}				public function test_log() :void		{			var msg :String = '[LogTest].test_log()';			setupAsyncListener( msg );			Log.log( msg );		}				public function test_debug() :void		{			var msg :String = '[LogTest].test_debug()';			setupAsyncListener( msg );			Log.debug( msg );		}				public function test_info() :void		{			var msg :String = '[LogTest].test_info()';			setupAsyncListener( msg );			Log.info( msg );		}				public function test_warn() :void		{			var msg :String = '[LogTest].test_warn()';			setupAsyncListener( msg );			Log.warn( msg );		}				public function test_error() :void		{			var msg :String = '[LogTest].test_error()';			setupAsyncListener( msg );			Log.error( msg );		}				public function test_fatal() :void		{			var msg :String = '[LogTest].test_fatal()';			setupAsyncListener( msg );			Log.fatal( msg );		}				public function test_core() :void		{			var msg :String = '[LogTest].test_core()';			setupAsyncListener( msg );			Log.core( msg );		}		private function setupAsyncListener( msg:String ):void		{			_janitor.addEventListener( _logger, LogEvent.UPDATE, addAsync( function( event:LogEvent ):void {	            handleEventSucceed( event.message, msg );	        }, 100, 	        function( event:LogEvent ):void {				handleEventFailed( msg );	        }));		}				private function handleEventSucceed( eventMsg:String, msg :String ) :void		{			assertEquals( eventMsg, msg );		}				private function handleEventFailed( msg :String ) :void		{			fail( '[LogTest].handleEventFailedTrace()' + msg );		}	}}