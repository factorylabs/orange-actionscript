package tests.factorylabs.orange.core.logger{	import tests.digitalprimates.fluint.tests.TestCase;		import com.factorylabs.orange.core.logger.Log;	import com.factorylabs.orange.core.logger.LogLevels;	import com.factorylabs.orange.core.logger.events.LogEvent;		/** 	 * Test methods for the Log test case. 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Apr 20, 2009 	 */	public class LogTest		extends TestCase	{				private var _logger :Log;			public function LogTest()		{			super();			_logger = Log.getInstance();			Log.level = LogLevels.CORE;		}		override public function toString() :String 		{			return "tests.factorylabs.core.logger.LogTest";		}				public function test_level() :void		{			Log.level = LogLevels.INFO;			assertEquals( Log.level, LogLevels.INFO );						Log.level = LogLevels.CORE;			assertEquals( Log.level, LogLevels.CORE );		}				public function test_appName() :void		{			Log.appName = "testing.log.appName";			assertEquals( Log.appName, "testing.log.appName" );			Log.appName = "NO APP NAME DEFINED";			assertEquals( Log.appName, "NO APP NAME DEFINED" );		}				public function test_isDev() :void		{			Log.isDev = false;			assertFalse( Log.isDev );			Log.isDev = true;			assertTrue( Log.isDev );		}				public function test_hasClearance() :void		{			Log.level = LogLevels.WARN;			assertTrue( _logger.hasClearance( LogLevels.LOG ) );			assertTrue( _logger.hasClearance( LogLevels.WARN ) );			assertFalse( _logger.hasClearance( LogLevels.CORE ) );			Log.level = LogLevels.CORE;		}		public function test_trace() :void		{			var msg :String = '[LogTest].test_trace()';			addAsyncListener( { message: msg } );			Log.trace( msg );		}				public function test_log() :void		{			var msg :String = '[LogTest].test_log()';			addAsyncListener( { message: msg } );			Log.log( msg );		}				public function test_debug() :void		{			var msg :String = '[LogTest].test_debug()';			addAsyncListener( { message: msg } );			Log.debug( msg );		}				public function test_info() :void		{			var msg :String = '[LogTest].test_info()';			addAsyncListener( { message: msg } );			Log.info( msg );		}				public function test_warn() :void		{			var msg :String = '[LogTest].test_warn()';			addAsyncListener( { message: msg } );			Log.warn( msg );		}				public function test_error() :void		{			var msg :String = '[LogTest].test_error()';			addAsyncListener( { message: msg } );			Log.error( msg );		}				public function test_fatal() :void		{			var msg :String = '[LogTest].test_fatal()';			addAsyncListener( { message: msg } );			Log.fatal( msg );		}				public function test_core() :void		{			var msg :String = '[LogTest].test_core()';			addAsyncListener( { message: msg } );			Log.core( msg );		}		private function addAsyncListener( passThroughData :Object ) :void		{			_logger.addEventListener( LogEvent.UPDATE, asyncHandler( handleEventVerified, 100, passThroughData, handleEventFailed ), false, 0, true );		}				private function removeAsyncListener() :void		{			_logger.removeEventListener( LogEvent.UPDATE, asyncHandler );		}				private function handleEventVerified( e :LogEvent, passThroughData :Object ) :void		{			removeAsyncListener();			assertEquals( e.message, passThroughData[ 'message' ] );		}				private function handleEventFailed( data :Object ) :void		{			removeAsyncListener();			fail( '[LogTest].handleEventFailedTrace()' + data );		}	}}