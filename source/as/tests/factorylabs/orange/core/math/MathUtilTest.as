package tests.factorylabs.orange.core.math{	import tests.digitalprimates.fluint.tests.TestCase;		import com.factorylabs.orange.core.math.MathUtil;			/** 	 * Test methods for the MathUtil test case. 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		Matthew Kitt 	 * @version		1.0.0 :: Mar 16, 2009 	 *  	 * @TODO: A good deal of these methods can be moved into a geometry util. 	 */	public class MathUtilTest		extends TestCase	{			public function MathUtilTest()		{			super();		}				override public function toString() :String 		{			return "tests.factorylabs.core.math.MathUtilTest";		}				public function test_degreesToRadians() :void		{			assertEquals( 3.141592653589793, MathUtil.degreesToRadians( 180 ) );			assertEquals( 1.5707963267948966, MathUtil.degreesToRadians( 90 ) );		}				public function test_radiansToDegrees() :void		{			assertEquals( Math.round( MathUtil.radiansToDegrees( 3.14 ) ), 180 );			assertEquals( Math.round( MathUtil.radiansToDegrees( 1.57 ) ), 90 );		}				public function test_percentToDegress() :void		{			assertEquals( 360, MathUtil.percentToDegrees( 1 ) );			assertEquals( 180, MathUtil.percentToDegrees( .5 ) );		}				public function test_degreesToPercent() :void		{			assertEquals( 1, MathUtil.degreesToPercent( 360 ) );			assertEquals( .5, MathUtil.degreesToPercent( 180 ) );		}				[Test(description="Hard to test randomness, but we can test if its a legitimate value.", tracker_id="")]		public function test_randRange() :void		{			var random		:Number = MathUtil.randRange( 0, 10 );			var inBounds	:Boolean = ( random >= 0 && random <= 10 ) ? true : false;			assertTrue( inBounds );		}				[Test(description="Hard to test randomness, but we can test if its a legitimate value.", tracker_id="")]		public function test_randRangeDecimel() :void		{			var random		:Number = MathUtil.randRangeDecimel( 0, 10 );			var inBounds	:Boolean = ( random >= 0 && random <= 10 ) ? true : false;			assertTrue( inBounds );		}				public function test_sums() :void		{			var array :Array = [ 5, 10, 15, 20 ];			assertEquals( 50, MathUtil.sums( array ) );		}				public function test_average() :void		{			var array :Array = [ 5, 10, 15, 20 ];			assertEquals( 12.5, MathUtil.average( array ) );		}				public function test_getPercentWithinRange() :void		{			assertEquals( 50, MathUtil.getPercentWithinRange( 50, 150, 100 ) );		}				public function test_interp() :void		{			assertEquals( 15, MathUtil.interp( 10, 20, .5 ) );		}				public function test_remap() :void		{			assertEquals( 1.5, MathUtil.remap( 10, 0, 20, 1, 2 ) );		}	}}