<?xml version="1.0" encoding="UTF-8"?>
<!--
	* Build items for the dev project.
	* Matthew Kitt
	* Ryan Boyajian
	*
	* TODO: compile to .swc with compc
	* 
	*
	* reducer/dump info: http://blog.joa-ebert.com/
	* app for opening up .dot files for the UML and Inheritence Graphs: http://www.graphviz.org/
	*
	* YUI Compressor: http://javaflight.blogspot.com/2008/01/introducing-yui-compressor-ant-task.html
	*
	* ant howto: http://ant.apache.org/manual/running.html
	* command line runAll navigate to build directory then run this command: ant -buildfile build.xml runAll
-->

<project name='dev' basedir='../' default='fdtResetFCSH'>
	
	<!--
	include the properties for running builds -->
	<property file="./build/build.properties"/>
	
<!-- 
FDT SPECIFIC ANT TASKS 
-->
	<!--
	public -->
    <target name='fdtResetFCSH' description='forces the mxmlc to refresh its cached data.'>
        <fdt.launch.resetFCSH/>
    	<echo>Pipes are cleaned in the ${ant.project.name} project.</echo>
    </target>
	
	<!--
	public -->
	<target name='fdtRunAll' depends='fdtResetFCSH, fdtRunTests, fdtRunLoader, fdtRunApplication' 
		description='kill kittens.'>
		<echo>fantastic job.</echo>
	</target>
	
	<!-- 
	public -->         
	<target name='fdtDebugApplication' depends='-fdtStartDebugger, -fdtCompileApplication' 
			description='launches and debugs the main application through the default browser using the FDT launcher.'>
		<fdt.browse location='${local.deploy}/'/>
	</target>
	
	<!-- 
	public -->         
	<target name='fdtRunApplication' depends='-setDebugFalse, -fdtCompileApplication' 
			description='launches the main application through the default browser using the FDT launcher.'>
		<fdt.browse location='${local.deploy}/'/>
	</target>
	
	<!-- 
	public -->         
	<target name='fdtDebugLoader' depends='-fdtStartDebugger, -fdtCompileLoader' 
			description='launches and debugs the application loader through the default browser using the FDT launcher.'>
		<fdt.browse location='${local.deploy}/'/>
	</target>
	
	<!-- 
	public -->
	<target name='fdtRunLoader' depends='-setDebugFalse, -fdtCompileLoader' 
			description='launches the application loader through the default browser using the FDT launcher.'>
		<fdt.browse location='${local.deploy}/'/>
	</target>
	
	<!-- 
	public -->         
	<target name='fdtDebugTests' depends='-fdtStartDebugger, -fdtCompileTests' 
			description='launches and debugs the unit tests gui through the default browser using the mxml launcher.'>
		<fdt.browse location='${tests.url}'/>
	</target>
	
	<!-- 
	public -->         
	<target name='fdtRunTests' depends='-setDebugFalse, -fdtCompileTests' 
			description='launches the unit tests gui through the default browser using the mxml launcher.'>
		<fdt.browse location='${tests.url}'/>
	</target>

	<!-- 
 	private: build using the FDT launch method for the main App. -->
    <target name='-fdtCompileApplication' >
    	<delete file='${webapp.swf}'/>
    	<fdt.launch.application
    		projectname="${ant.project.name}" 
    		mainclass="${webapp.main}"
    		debug="${isDebug}" 
    		target="${webapp.swf}" 
    		startswf="${autostart}"
    		compilerarguments="-target-player ${target_player} -include-libraries ${webapp.libs} -default-size ${width} ${height} -default-frame-rate ${framerate} -default-background-color ${background} -as3=${as3} -optimize=${optimize} -show-actionscript-warnings=${showWarn} ${webapp.args}"
    	/>
    	<!-- set property of .swf file to reduce -->
    	<property name='swfToReduce' value='${webapp.swf}'/>
    	<!-- reduce all .pngs in current .swf -->
    	<antcall target="-reduceSwf"/>
    </target>
	
	<!-- 
 	private: build using the FDT launch method for the Loader. -->
    <target name='-fdtCompileLoader' >
    	<delete file='${loader.swf}'/>    	
    	<fdt.launch.application 
    		projectname="${ant.project.name}" 
    		mainclass="${loader.main}"
    		debug="${isDebug}"
    		target="${loader.swf}" 
    		startswf="${autostart}"
    		compilerarguments="-target-player ${target_player} -include-libraries ${loader.libs} -default-size ${width} ${height} -default-frame-rate ${framerate} -default-background-color ${background} -as3=${as3} -optimize=${optimize} -show-actionscript-warnings=${showWarn} ${loader.args}"
    	/>
    	<!-- set property of .swf file to reduce -->
    	<property name='swfToReduce' value='${loader.swf}'/>
    	<!-- reduce all .pngs in current .swf -->
    	<antcall target="-reduceSwf"/>
    </target>
	
	<!-- 
 	private: build using the FDT launch method for the Testing framework. -->
    <target name='-fdtCompileTests' >
    	<fdt.launch.application 
    		projectname="${ant.project.name}" 
    		mainclass="${tests.main}"
    		debug="${isDebug}"
    		target="${tests.swf}" 
    		startswf="${autostart}"
    		compilerarguments="-default-size ${width} ${height} -default-frame-rate ${framerate} -default-background-color ${background} -as3=${as3} -optimize=${optimize} -show-actionscript-warnings=${showWarn} ${tests.args}"
    	/>
	</target>
	
	<!-- DEBUGGING METHODS
	private: kick start the FDT bugger and allow the .swf to be compiled in debug mode. **This one still requires FDT for having debugging in the console.** -->
    <target name='-fdtStartDebugger' >
    	<property name='isDebug' value='true'/>
		<property name='useNetwork' value='true'/>
    	<fdt.startDebugger projectname="${ant.project.name}" savelocation="build"/>
    </target>
	<!--
	private: compile the .swf without debug mode. -->
    <target name='-setDebugFalse' >
    	<property name='isDebug' value='false'/>
		<property name='useNetwork' value='true'/>
    </target>
	
<!--
AS DOCUMENTOR TASKS
-->
	<target name='-cleanDocs'>
		<echo>Removing old doc files...</echo>
		<delete dir="${bin.docs}/as3" failOnError="false" includeEmptyDirs="true"/>
		<mkdir dir="${bin.docs}/as3"/>
	</target>
	
	<target name='-setDocArguments'>
		<echo>Preparing ASDoc Properties</echo>
		<property name="" location=""></property>
	</target>
	
	<target name="-createTimestamp">
		<tstamp>
	      <format property="date.time" pattern="MM/dd/yyyy hh:mm aa"
	              offset="0" unit="hour"/>
	  </tstamp>
	  <tstamp>
	      <format property="year" pattern="yyyy"
	              offset="0" unit="year"/>
	  </tstamp>
	  <echo>Current time is: ${date.time}</echo>
	</target>
	
	<target name="-cleanPublishFolder">
		<echo>Deleting old documentation settings and files...</echo>
		<delete dir="${asdocumentor.publish}" failOnError="false" includeEmptyDirs="true"/>
		<delete file="${asdocumentor.manifest}"/>
		<mkdir dir="${asdocumentor.publish}"/>
	</target>
	
	<target name="runAsDocumentor" description="Launches the Factory AS Documentor" depends="-cleanPublishFolder, -createTimestamp" >
		<echo>Launching Factory AS Documentor...</echo>
		<exec executable="${asdocumentor}" spawn="no" failonerror="true">
			
			<!-- 
			<arg line="-settings=${asdocumentor.settings}"/>
			-settings: Points to a previously created XML file with custom AS Documentor settings -->
			
			<arg line="-asdoc='${FLEX_HOME.asdoc}'"/>
			<arg line="-classpath='${bin.as}'"/>
			
			<!-- 
			Add references to built-in Flash libraries -->
			<arg line="-source-classpath='${asdocumentor.core}'"/>
			<arg line="-source-classpath='${asdocumentor.ui}'"/>
			<arg line="-source-classpath='${asdocumentor.extras}'"/>
			
			<!-- 
			Exclude built-in Flash libraries from documentation -->
			<arg line="-exclude='${asdocumentor.ui}'"/>
			<arg line="-exclude='${asdocumentor.extras}'"/>
			
			<!-- 
			Exclude client and 3rd party libraries -->
			<arg line="-exclude='${bin.as}/com/asual'"/>
			<arg line="-exclude='${bin.as}/com/akamai'"/>
			<arg line="-exclude='${bin.as}/com/caurina'"/>
			<arg line="-exclude='${bin.as}/com/client'"/>
			<arg line="-exclude='${bin.as}/com/gs'"/>
			<arg line="-exclude='${bin.as}/com/pixelbreaker'"/>
			<arg line="-exclude='${bin.as}/com/realeyesmedia'"/>
			<arg line="-exclude='${bin.as}/tests'"/>
			
			<!-- Specify location to save manifest.xml -->
			<arg line="-manifest='${asdocumentor.manifest}'"/>
			
			<!-- Specify the main title, window title, and footer text -->
			<arg line="-main-title='${ant.project.name} Documentation / Created ${date.time}'"/>
			<arg line="-window-title='${ant.project.name} API Documentation'"/>
			<arg line="-footer='Copyright ${year} by Factory Design Labs, All Rights Reserved.'"/>
			
			<!-- Specify folder to create HTML files in. -->
			<arg line="-output='${asdocumentor.publish}'"/>
			<arg line="-namespace='${asdocumentor.namespace}'"/>
		</exec>
	</target>
	
<!-- 
YUI COMPRESSION FOR JAVASCRIPT FILES 
-->
	<!-- PATH AND TASK DEFINITIONS
	add yui compressor for javascript files -->
	<path id="task.classpath">
		<pathelement location="${yui_compressor}"/>
		<pathelement location="${yui_compressor_ant_task}"/>
	</path>
	<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath refid="task.classpath"/>
	</taskdef>
	<!-- CONCAT AND COMPRESS
	public compresses javascript files from one directory to another -->
	<target name="compressJavascripts" description='Concats all .js to one global.js file and compresses javascripts using the YUI Compressor.'>
		<echo>- compress js files -</echo>
		<delete file='${js.source}/global.js'/>
		<concat destfile="${js.source}/global.js" force="no">
	        <!-- explicitly order js concat because ordering matters here -->
	    	<fileset dir="${js.source}" includes="swfobject.js"/>
			<fileset dir="${js.source}" includes="swfaddress.js"/>
			<fileset dir="${js.source}" includes="swffit.js"/>
			<fileset dir="${js.source}" includes="swfmacmousewheel2.js"/>
			<fileset dir="${js.source}" includes="swfengine.js"/>
		</concat>
		<yui-compressor optimize="true" warn="false" munge="true" preserveallsemicolons="false" fromdir="${js.source}" todir="${js.deploy}">
			<include name="global.js"/>
		</yui-compressor>
	</target>

<!-- 
DUMP TASKS FOR DEBUGGING
-->
	<!--
	public: export DefineBitsJPEG2 images -->
	<target name='dumpExportDefineBitsJPEG' depends='' description='Export DefineBitsJPEG2 images in the .swf - not totally sure what this does without .jpgs in the .swf.'>
		<echo>- export DefineBitsJPEG2 images in ${webapp.swf} -</echo>
		<exec executable='java' failonerror='true'>
			<arg line='-jar ${dump} -input ${webapp.swf} -images'/>
		</exec>
	</target>
	<!--
	public: create uml for this. 'Since Graphviz is not able to underline text I have choosen to use a dollar sign for static methods. You will also get proper parameter names if you compile your SWF file in debug mode.' -Joa Ebert -->
	<target name='dumpGenerateUML' depends='' description='Creates a UML diagram from the abc files using dump and puts it in the root of the directory in a .dot file.'>
		<echo>- generate UML for ${webapp.swf} -</echo>
		<exec executable='java' failonerror='true' output='${bin.docs}/dump/app_uml.dot'>
			<arg line='-jar ${dump} -input ${webapp.swf} -uml'/>
		</exec>
	</target>
	<!--
	public: create inheritance graph for this -->
	<target name='dumpInheritanceGraph' depends='' description='Creates an inheritance graph from the .swf - makes a .dot file that shows all class and interface inheritances.'>
		<echo>- generate an inheritance graph for ${webapp.swf} -</echo>
		<exec executable='java' failonerror='true'>
			<arg line='-jar ${dump} -input ${webapp.swf} -ig'/>
		</exec>
	</target>
	<!--
	public: pretty print ABC files -->
	<target name='dumpPrettyPrintABC' depends='' description='Pretty print ABC files in the .swf - basically prints out a list of everything that ends up in the .swf.'>
		<echo>- pretty print ABC files in ${webapp.swf} -</echo>
		<exec executable='java' failonerror='true'>
			<arg line='-jar ${dump} -input ${webapp.swf} -abc'/>
		</exec>
	</target>
	<!--
	public: show known tags -->
	<target name='dumpShowKnownTags' depends='' description='Show known tags in the .swf - shows stuff like FileAttributes and Metadata in the console window.'>
		<echo>- show known tags in ${webapp.swf} -</echo>
		<exec executable='java' failonerror='true'>
			<arg line='-jar ${dump} -input ${webapp.swf} -tags'/>
		</exec>
	</target>
	
<!--
RUN/COMPILE TASKS THAT DO NOT REQUIRE FDT
-->
	<!-- RUN ALL
	runs the application and the loader without the need for FDT -->
	<target name='sansFdtRunAll' depends='-setDebugFalse, -sansFdtCompileLoader, -sansFdtCompileApplication' description='Compiles both the loader and the main .swfs, reduces the .pngs within it, and launches the project in ${browser}.'>
		<antcall target="-launchBrowser"/>
	</target>
	
	<!-- RUN/DEBUG APP
	runs the application without the need for FDT -->
	<target name='sansFdtRunApplication' depends='-setDebugFalse, -sansFdtCompileApplication' description='Compiles the application, reduces the .pngs within it, and launches it in ${browser}.'>
		<antcall target="-launchBrowser"/>
	</target>
	
	<!-- RUN/DEBUG LOADER
	runs the application without the need for FDT -->
	<target name='sansFdtRunLoader' depends='-setDebugFalse, -sansFdtCompileLoader' description='Compiles the loader, reduces the .pngs within it, and launches it in ${browser}.'>
		<antcall target="-launchBrowser"/>
	</target>
	
	<!-- COMPILE APP/LOADER
 	private: build the main .swf -->
    <target name='-sansFdtCompileApplication' >
    	<echo>- compiling ${webapp.swf} in the ${ant.project.name} project -</echo>
    	<delete file='${webapp.swf}'/>
		<!-- compile .swf -->
    	<exec executable="${FLEX_HOME.mxmlc}" dir="${FLEX_HOME}/bin">
    		<!--<arg line='mxmlc'/>-->
			<arg line='-o ${webapp.swf}'/>
			<arg line='-sp ${bin.as}'/>
			<arg line='-as3=${as3}'/>
    		<arg line='-benchmark=${isDebug}'/>
			<arg line='-debug=${isDebug}'/>
			<arg line='-default-background-color ${background}'/>
			<arg line='-default-frame-rate ${framerate}'/>
			<arg line='-default-size ${width} ${height}'/>
			<arg line='-include-libraries ${webapp.libs}'/>
			<arg line='-optimize=${optimize}'/>
			<arg line='-show-actionscript-warnings=${showWarn}'/>
    		<arg line='-target-player=${target_player}'/>
    		<arg line='-verbose-stacktraces=${isDebug}'/>
			<arg line='${webapp.args}'/>
			<arg line='${webapp.main}'/>
    	</exec>
    	<!-- set property of .swf file to reduce -->
    	<property name='swfToReduce' value='${webapp.swf}'/>
    	<!-- reduce all .pngs in current .swf -->
    	<antcall target="-reduceSwf"/>
    </target>
	<!-- 
 	private: build the loader .swf -->
    <target name='-sansFdtCompileLoader' >
    	<echo>- compiling ${loader.swf} in the ${ant.project.name} project -</echo>
    	<delete file='${loader.swf}'/>
		<!-- compile .swf -->
    	<exec executable="${FLEX_HOME.mxmlc}" dir="${FLEX_HOME}/bin">
			<arg line='-o ${loader.swf}'/>
			<arg line='-sp ${bin.as}'/>
			<arg line='-as3=${as3}'/>
    		<arg line='-benchmark=${isDebug}'/>
			<arg line='-debug=${isDebug}'/>
			<arg line='-default-background-color ${background}'/>
			<arg line='-default-frame-rate ${framerate}'/>
			<arg line='-default-size ${width} ${height}'/>
    		<arg line='-include-libraries ${loader.libs}'/>
			<arg line='-optimize=${optimize}'/>
			<arg line='-show-actionscript-warnings=${showWarn}'/>
			<arg line='-target-player=${target_player}'/>
    		<arg line='-verbose-stacktraces=${isDebug}'/>
			<arg line='${loader.args}'/>
			<arg line='${loader.main}'/>
    	</exec>
    	<!-- set property of .swf file to reduce -->
    	<property name='swfToReduce' value='${loader.swf}'/>
    	<!-- reduce all .pngs in current .swf -->
    	<antcall target="-reduceSwf"/>
    </target>
	
	<!-- REDUCE .PNGS WITHIN A .SWF
	private: reduces the size of embedded .pngs in the .swf that use the [EMBED(source.png)] style. documentation: http://blog.joa-ebert.com/2009/08/08/reducer/ -->
	<target name='-reduceSwf'>
		<echo>- reducing embedded .pngs at ${reducer_quality} quality in ${swfToReduce} -</echo>
		<java fork='true' jar='${reducer}'>
			<arg line='-input ${swfToReduce} -output ${swfToReduce} -quality ${reducer_quality}'/>
		</java>
	</target>
	
	<!-- LAUNCH BROWSER
	private: launches the browser. -->
	<target name='-launchBrowser'>
		<echo>- launching ${browser} and opening up url: ${local.deploy}/ -</echo>
		<exec executable='open'>
			<arg line='${browser}'/>
			<arg line='${local.deploy}/'/>
		</exec>
	</target>

</project>


<!--
	Used for pure mxmlc executable file.. 
	<fdt.launch.application 
		autoaddclasspath="false"
		autoaddswcs="false"
		projectname="${ant.project.name}" 
		mainclass="${webapp.main}"
		debug="${isDebug}" 
		target="${webapp.swf}" 
		startswf="${autostart}"
		compilerarguments="-load-config ${basedir}/libs/flex_sdk_3.4/frameworks/flex-config.xml -target-player ${target_player} -include-libraries ${webapp.libs} -source-path ${bin.as} -source-path ${FLEX_HOME}/frameworks -default-size ${width} ${height} -default-frame-rate ${framerate} -default-background-color ${background} -as3=${as3} -optimize=${optimize} -show-actionscript-warnings=${showWarn} -link-report=${webapp.report}"
	/>
	<fdt.browse location='${tests.url}'/>
	
	
	Used with flex tasks jar within the SDK..
<taskdef classname="flex.ant.MxmlcTask" name="mxmlc" classpath="${flex_tasks}"/>
	<mxmlc 
		file='${webapp.main}'
		output='${webapp.swf}'
		actionscript-file-encoding='UTF-8'
		incremental='true'
		debug='${isDebug}'
		verbose-stacktraces='${isDebug}'
		benchmark='${isBenchmark}'
		use-network='${useNetwork}'
		default-background-color='${background}'
		default-frame-rate='${framerate}'
		as3='${as3}'
		optimize='${optimize}'
		show-actionscript-warnings='${showWarn}'
		link-report='${webapp.report}'
	>
		<source-path path-element='${bin.as}'/>
		<source-path path-element="${FLEX_HOME}/frameworks"/>
		<default-size width='${width}' height='${height}'/>
	</mxmlc>


	Example for generating a .swc with the compc compiler..	
	<fdt.launch.library
    	projectname="${ant.project.name}"
    	debug="${isDebug}"
    	target="${rsl.swc}"
    	autoAddClasspath="false"
    	autoAddSWCs="false"
    	compilerarguments=" -as3=${as3} -optimize=${optimize} -show-actionscript-warnings=${showWarn} ${rsl.args}"
   />
-->