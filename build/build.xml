<?xml version="1.0" encoding="UTF-8"?>

<!--
	Build items for the orange-actionscript project.
	@author Matthew Kitt
	@author Ryan Boyajian
	@author Sean Dougherty
	
	ant howto: http://ant.apache.org/manual/running.html
	
	TODO: add the compc compiler for generating .swc files
	TODO: refactor the test-unit-core task so it's more abstracted. tackle this when we dip into the next test package
-->
<project name="orange-actionscript" basedir="../" default="usage">

<!-- PROPERTY ASSIGNMENT & INITIALIZATION ========================================================================== -->	
    
    <!-- Setup the prefix for all environment variables -->
    <property environment="env."/>
    
    <!-- System environment must contain FLEX_HOME variable that points to Flex SDK. -->
    <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>
    
	<!-- Include the properties for running builds -->
	<property file="./build/build.properties"/>
    
    <!-- Setup FlexUnit Ant tasks 
    <taskdef resource="flexUnitTasks.tasks" classpath="${build.tasks}/flexUnitTasks.jar"/>
    -->

<!-- MELT FACES PUBLICLY =========================================================================================== -->
    
    <target name="print" description="print a property for debug">
        <echo>${FLEX_HOME}</echo>
    </target>
    
    <!-- 
    public -->
    <target name="usage" description="So here is how you use this thing.">
        <echo message="Factory Design Labs: ${project.version} ant tasks"/>
        <echo message="Note: FDT tasks may only be available within the FDT Eclipse plugin or FDT Stand Alone IDE"/>
        <echo message="----------------------------------------------------------------------------------------------"/>
        <echo message="[asdoc] => Generates the ASDocumentation for all orange packages"/>
        <echo message="[debug-barebones] => Compiles the barebones app with debug mode set to true"/>
        <echo message="[fdt-barebones] => FDT specific: debugs the barebones app with the FDT debugger enabled"/>
        <echo message="[fdt-reset-fcsh] => FDT specific: forces the mxmlc to refresh its cached data"/>
        <echo message="[fdt-test-unit-core] => FDT specific: debugs the test-unit-core tasks with the FDT debugger enabled"/>
        <echo message="[run-barebones] => Compiles the barebones app with debug mode set to false"/>
        <echo message="[test-unit-core] => Compiles, tests and generates reports for the orange.${tests.core.packagename} package"/>
        <echo message="----------------------------------------------------------------------------------------------"/>
        <echo message="www.factorylabs.com"/>
    </target>
    
    <!-- 
    public -->
    <target name="test-unit-core" 
        description="Compiles, tests and generates reports for the orange.${tests.core.packagename} package">
        <echo>[test-unit-core] Running unit test tasks for the orange.${tests.core.packagename} package</echo>
        <!--
        <antcall target="init-test-docs">
            <param name="param.package" value="${tests.core.packagename}"/>
        </antcall>
        -->
        <antcall target="-compile-mxmlc">
            <param name="param.mainclass" value="${test.core.runner}"/>
            <param name="param.swf" value="${test.core.swf}"/>
            <param name="param.width" value="${test.core.width}"/>
            <param name="param.height" value="${test.core.height}"/>
            <param name="param.color" value="${test.core.color}"/>
            <param name="param.isHeadless" value="true"/>
            <param name="param.isDebug" value="true"/>
            <param name="param.reportname" value="${test.core.reportname}"/>
        </antcall>
        <!--
        <antcall target="-run-flexunit">
            <param name="param.swf" value="${test.core.swf}"/>
            <param name="param.package" value="${tests.core.packagename}"/>
        </antcall>
        -->
        <!--
        <antcall target="-publish-junit-report">
            <param name="param.package" value="${tests.core.packagename}"/>
        </antcall>
        -->
        
        <antcall target="-publish-link-report">
            <param name="param.reportname" value="${test.core.reportname}"/>
        </antcall>
        
        
        
        <echo>[test-unit-core] Unit test tasks for the orange.${tests.core.packagename} package complete</echo>
    </target>
    
    <!-- 
    public -->
    <target name="run-barebones" description="Compiles the barebones app with debug mode set to false">
        <echo>[run-barebones] Running Barebones</echo>
        <antcall target="-compile-barebones">
            <param name="param.isDebug" value="false"/>
        </antcall>
        <echo>[run-barebones] Running Barebones complete</echo>
    </target>
    
    <!-- 
    public -->
    <target name="debug-barebones" description="Compiles the barebones app with debug mode set to true">
        <echo>[debug-barebones] Debugging Barebones</echo>
        <antcall target="-compile-barebones">
            <param name="param.isDebug" value="true"/>
        </antcall>
        <echo>[debug-barebones] Debugging Barebones complete</echo>
    </target>
    
    <!-- 
    public -->
	<target name="asdoc" depends="-generate-time-stamp, test-unit-core, init-asdocs" 
	    description="Generates the ASDocumentation for all orange packages">
	    <echo>[asdoc] Generating ASDocs</echo>
	    <java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
	        <arg line="-external-library-path ${libs}"/>
	        <arg line="-doc-sources ${source.as}/com"/>
	        <arg line="-source-path ${source.as}"/>
	        <arg line="-output ${docs.asdocs}"/>
	        <arg line="-window-title 'Factory Design Labs ${project.version}'"/>
	        <arg line="-main-title 'Factory Design Labs ${project.version}'"/>
	        <arg line="-footer 'Factory Design Labs - www.factorylabs.com - Generated at: ${date.time}'"/>
	        <arg line="-left-frameset-width=250" />
	        <arg line="-package com.factorylabs.orange.core 'This is the core'"/>
	    </java>
	    <echo>[asdocs] ASDocs generated</echo>
	</target>

<!-- PUBLIC FDT SPECIFIC TASKS ===================================================================================== -->   
    
    <!--
	public -->
    <target name="fdt-reset-fcsh" description="FDT specific: forces the mxmlc to refresh its cached data">
        <fdt.launch.resetFCSH/>
        <echo>[fdt-reset-fcsh] The FCSH in ${ant.project.name} has been reset â€“ giddyup</echo>
    </target>
    
    <!--
	public -->
    <target name="fdt-test-unit-core" depends="fdt-reset-fcsh, -fdt-start-debugger, test-unit-core"
    	description="FDT specific: debugs the test-unit-core tasks with the FDT debugger enabled">
        <!-- 
        <fdt.browse location="${test.core.url}"/>
        ${test.core.url} 
        -->
        
        <fdt.extSWFViewer.startSWF 
        	file="${test.core.url}" 
            width="200" 
            height="200"  
            focusprocess="executable"
        />
    </target>
    
    <!--
	public -->
    <target name="fdt-barebones" depends="debug-barebones, fdt-reset-fcsh, -fdt-start-debugger"
    	description="FDT specific: debugs the barebones app with the FDT debugger enabled">
        <fdt.browse location="${bb.url}"/>
    </target>
    
    <target name="fdt-TEST" description="TESTING FOR THE EXTERNAL VIEWER!" depends="-fdt-start-debugger">
        
        
        <fdt.launch.application 
            		projectname="${project.name}" 
            		mainclass="${test.core.runner}"
            		debug="true"
            		target="${test.core.swf}" 
            		startswf="true"
            		swflauncher = "Adobe Flash Player"
            		compilerarguments="-default-size 200 200 -default-frame-rate 30 -default-background-color ${test.core.color} -as3=true -optimize=true -show-actionscript-warnings=true"
            	/>
    </target>
    
    <target name='-fdtCompileSimple' >
    	<!--
    	 <delete file='${webapp.swf}'/>
    	 
    	 -include-libraries ${webapp.libs} 
    	-->
        <echo>${project.name}</echo>
        <delete file='${param.swf}'/>
    	<fdt.launch.application
    		projectname="${project.name}" 
    		mainclass="${param.mainclass}"
    		debug="${param.isDebug}" 
    		target="${param.swf}" 
    		startswf="true"
    		compilerarguments="-target-player ${target.player} -default-size ${param.width} ${param.height} -default-frame-rate ${framerate} -default-background-color=${test.core.color} -as3=true -optimize=true -show-actionscript-warnings=false"
    	/>
        
        
        <!--
        <fdt.extSWFViewer.startSWF 
                	file="${test.core.swf}" 
                    width="${param.width}" 
                    height="${param.height}"  
                    focusprocess="executable"
                />
                
    	-->
    </target>
    
<!-- PROTECTED TASKS =============================================================================================== -->
    
    <!-- 
    	protected: This is hidden and used internally, but available from the command line.
    	Cleans out the directories within html and xml for the JUnit reports.
    	@param param.package	The directory name to remove. 
    -->
    <target name="clean-test-docs">
        <echo>[clean-test-docs] Removing ${param.package} directories</echo>
        <delete includeemptydirs="true" failonerror="false" >
            <fileset dir="${docs.tests}/html/${param.package}" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${docs.tests}/xml/${param.package}" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
        </delete>
        <echo>[clean-test-docs] The ${param.package} directories are removed</echo>
    </target>
    
    <!-- 
    	protected: This is hidden and used internally, but available from the command line.
    	Creates the directories within html and xml for the JUnit reports.
    	@param param.package	The directory name to create. 
    -->
    <target name="init-test-docs">
        <antcall target="clean-test-docs">
            <param name="param.package" value="${tests.core.packagename}"/>
        </antcall>
        <echo>[init-test-docs] Creating ${param.package} directories</echo>
        <mkdir dir="${docs.tests}/html/${param.package}"/>
        <mkdir dir="${docs.tests}/xml/${param.package}"/>
        <echo>[init-test-docs] The ${param.package} directories are created</echo>
    </target>
    
    <!-- 
		protected: This is hidden and used internally, but available from the command line.
		Cleans out the directories associated with generating ASDocumentation. 
	-->
    <target name="clean-asdocs">
        <echo>[clean-asdocs] Removing ASDoc directories</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${docs.asdocs}" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
        </delete>
        <echo>[clean-asdocs] ASDoc directories removed</echo>
    </target>
    
	<!-- 
		protected: This is hidden and used internally, but available from the command line.
		Creates directories for generating ASDocumentation. Depends on clean-asdocs. 
	-->
    <target name="init-asdocs" depends="clean-asdocs">
        <echo>[init-asdocs] Creating ASDoc directories</echo>
        <mkdir dir="${docs.asdocs}"/>
        <echo>[init-asdocs] ASDoc directories created</echo>
    </target>
    
<!-- PRIVATE COMPILATION =========================================================================================== -->
    
    <!--  
	 	private: Setup and compile the barebones app using the mxmlc compiler.
	 	@param param.isDebug	Whether to compile in debug mode, benchmark and verbose stack traces. 
	-->
    <target name="-compile-barebones"> 
        <echo>[-compile-barebones] Setup and compiling Barebones with debug mode set to ${param.isDebug}</echo>
        
        <antcall target="-compile-mxmlc">
            <param name="param.mainclass" value="${bb.main}"/>
            <param name="param.swf" value="${bb.swf}"/>
            <param name="param.width" value="${bb.width}"/>
            <param name="param.height" value="${bb.height}"/>
            <param name="param.color" value="${bb.color}"/>
            <param name="param.isHeadless" value="true"/>
            <param name="param.isDebug" value="${param.isDebug}"/>
            <param name="param.reportname" value="${bb.reportname}"/>
        </antcall>
        
        <antcall target="-publish-link-report">
            <param name="param.reportname" value="${bb.reportname}"/>
        </antcall>
        <echo>[-compile-barebones] Barebones setup and compile complete</echo>
    </target>
    
    <!--  
	 	private: Compiles a swf file using the mxmlc compiler.
	 	@param param.mainclass	The Main class used to generate the swf.
	 	@param param.swf		The output file created by the mxmlc compiler.
	 	@param param.width		The width value of the swf.
	 	@param param.height		The height value of the swf.
	 	@param param.color		The background color of the swf.
	 	@param param.isHeadless	Whether this swf is compiled as headless.
	 	@param param.isDebug	Whether to compile in debug mode, benchmark and verbose stack traces.
	 	@param param.reportname	The name given to the link report file. 
	-->
	<target name="-compile-mxmlc">
	    <echo>[-compile-mxmlc] Compiling MXMLC</echo>
	    <java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
	    	<arg value="${param.mainclass}"/>
	        <arg value="-source-path=${source.as}"/>
	        <arg value="-output=${param.swf}"/>
	        <arg value="-library-path+=${libs}"/>
	        <arg value="-target-player=${target.player}"/>
	        <arg value="-default-size=${param.width},${param.height}"/>
	        <arg value="-default-background-color=${param.color}"/>
	        <arg value="-default-frame-rate=${framerate}"/>
	        <arg value="-headless-server=${param.isHeadless}"/>
	        <arg value="-debug=${param.isDebug}"/>
	        <arg value="-benchmark=${param.isDebug}"/>
	        <arg value="-verbose-stacktraces=${param.isDebug}"/>
	        <arg value="-incremental=true"/>
	        <arg value="-use-network=true"/>
	        <arg value="-as3=true"/>
	        <arg value="-optimize=true"/>
	        <arg value="-show-actionscript-warnings=false"/>
	        <arg value="-link-report=${docs.reports}/xml/${param.reportname}.xml"/>
	    </java>
	    <echo>[-compile-mxmlc] MXMLC compiled</echo>
	</target>
    
    <!--  
	 	private: Runs the FlexUnit 4 test on the specified swf.
	 	@param param.swf		The file to run the FlexUnit tests on.
	 	@param param.package	The directory to output the xml results of the tests.
 	
    <target name="-run-flexunit">
        <echo>[-run-flexunit] Running FlexUnit tests</echo>
        <flexunit 
            swf="${param.swf}" 
            toDir="${docs.tests}/xml/${param.package}" 
            haltonfailure="true" 
            verbose="true" 
            localTrusted="true"/>
        <echo>[-run-flexunit] FlexUnit tests complete :: All Tests Passed</echo>
    </target>
    -->

<!-- PRIVATE REPORTING ============================================================================================= -->    
    
    <!--  
	 	private: Publishes the results of the FlexUnit test to a JUnit style report.
	 	@param param.package	The directory to generate a report from the xml results of the tests.
 	-->
    <target name="-publish-junit-report">
        <echo>[-publish-junit-report] Publishing JUnit report</echo>
        <junitreport todir="${docs.tests}/xml/${param.package}">
            <fileset dir="${docs.tests}/xml/${param.package}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${docs.tests}/html/${param.package}"/>
        </junitreport>
        <echo>[-publish-junit-report] JUnit report published</echo>
    </target>
    
    <!--  
	 	private: Performs an XSLT transform on the generated link report xml file.
	 	@param param.reportname	The name of the report, appropriate file extensions will be appended. 
 	-->
    <target name="-publish-link-report">
        <echo>[-publish-link-report] Publishing ${param.reportname} link report</echo>
        <xslt
        	in="${docs.reports}/xml/${param.reportname}.xml"
            out="${docs.reports}/html/${param.reportname}.html"
        	style="${docs.reports}/xsl/link-report.xsl"
        />
        <echo>[-publish-link-report] ${param.reportname} link report published</echo>
    </target>
    
    <!--  
	 	private: Generates a time stamp for properies of date.time and date.year. 
 	-->
    <target name="-generate-time-stamp">
	    <tstamp>
	        <format property="date.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
	    </tstamp>
	    <tstamp>
	        <format property="date.year" pattern="yyyy" unit="year"/>
	    </tstamp>
	    <echo>Current time is ${date.time}</echo>
	</target>

<!-- PRIVATE FDT SPECIFIC TASKS ==================================================================================== -->
    
    <!--  
	 	private: Starts up the FDT bugger for logging to the console panel. Requires the FDT plugin or standalone IDE.
	 	Note: requires the -compile-mxmlc task -debug argument set to true. 
 	-->
    <target name="-fdt-start-debugger">
        <echo>[-fdt-start-debugger] Starting FDT Debugger</echo>
    	<fdt.startDebugger projectname="${ant.project.name}" savelocation="build"/>
        <echo>[-fdt-start-debugger] FDT Debugger started</echo>
    </target>
    
</project>